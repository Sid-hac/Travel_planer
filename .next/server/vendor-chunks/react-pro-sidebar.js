"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-pro-sidebar";
exports.ids = ["vendor-chunks/react-pro-sidebar"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-pro-sidebar/dist/index.es.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-pro-sidebar/dist/index.es.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LevelContext: () => (/* binding */ LevelContext),\n/* harmony export */   Menu: () => (/* binding */ Menu),\n/* harmony export */   MenuContext: () => (/* binding */ MenuContext),\n/* harmony export */   MenuItem: () => (/* binding */ MenuItem),\n/* harmony export */   MenuItemFR: () => (/* binding */ MenuItemFR),\n/* harmony export */   ProSidebarProvider: () => (/* binding */ ProSidebarProvider),\n/* harmony export */   Sidebar: () => (/* binding */ Sidebar),\n/* harmony export */   SidebarContext: () => (/* binding */ SidebarContext),\n/* harmony export */   SubMenu: () => (/* binding */ SubMenu),\n/* harmony export */   SubMenuFR: () => (/* binding */ SubMenuFR),\n/* harmony export */   menuClasses: () => (/* binding */ menuClasses),\n/* harmony export */   sidebarClasses: () => (/* binding */ sidebarClasses),\n/* harmony export */   useProSidebar: () => (/* binding */ useProSidebar)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction memoize(fn) {\n    var cache = Object.create(null);\n    return function(arg) {\n        if (cache[arg] === undefined) cache[arg] = fn(arg);\n        return cache[arg];\n    };\n}\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\nvar isPropValid = /* #__PURE__ */ memoize(function(prop) {\n    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;\n});\n/*\n\nBased off glamor's StyleSheet, thanks Sunil ❤️\n\nhigh performance StyleSheet for css-in-js systems\n\n- uses multiple style tags behind the scenes for millions of rules\n- uses `insertRule` for appending in production for *much* faster performance\n\n// usage\n\nimport { StyleSheet } from '@emotion/sheet'\n\nlet styleSheet = new StyleSheet({ key: '', container: document.head })\n\nstyleSheet.insert('#box { border: 1px solid red; }')\n- appends a css rule into the stylesheet\n\nstyleSheet.flush()\n- empties the stylesheet of all its contents\n\n*/ // $FlowFixMe\nfunction sheetForTag(tag) {\n    if (tag.sheet) {\n        // $FlowFixMe\n        return tag.sheet;\n    } // this weirdness brought to you by firefox\n    /* istanbul ignore next */ for(var i = 0; i < document.styleSheets.length; i++){\n        if (document.styleSheets[i].ownerNode === tag) {\n            // $FlowFixMe\n            return document.styleSheets[i];\n        }\n    }\n}\nfunction createStyleElement(options) {\n    var tag = document.createElement(\"style\");\n    tag.setAttribute(\"data-emotion\", options.key);\n    if (options.nonce !== undefined) {\n        tag.setAttribute(\"nonce\", options.nonce);\n    }\n    tag.appendChild(document.createTextNode(\"\"));\n    tag.setAttribute(\"data-s\", \"\");\n    return tag;\n}\nvar StyleSheet = /*#__PURE__*/ function() {\n    // Using Node instead of HTMLElement since container may be a ShadowRoot\n    function StyleSheet(options) {\n        var _this = this;\n        this._insertTag = function(tag) {\n            var before;\n            if (_this.tags.length === 0) {\n                if (_this.insertionPoint) {\n                    before = _this.insertionPoint.nextSibling;\n                } else if (_this.prepend) {\n                    before = _this.container.firstChild;\n                } else {\n                    before = _this.before;\n                }\n            } else {\n                before = _this.tags[_this.tags.length - 1].nextSibling;\n            }\n            _this.container.insertBefore(tag, before);\n            _this.tags.push(tag);\n        };\n        this.isSpeedy = options.speedy === undefined ? \"development\" === \"production\" : options.speedy;\n        this.tags = [];\n        this.ctr = 0;\n        this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets\n        this.key = options.key;\n        this.container = options.container;\n        this.prepend = options.prepend;\n        this.insertionPoint = options.insertionPoint;\n        this.before = null;\n    }\n    var _proto = StyleSheet.prototype;\n    _proto.hydrate = function hydrate(nodes) {\n        nodes.forEach(this._insertTag);\n    };\n    _proto.insert = function insert(rule) {\n        // the max length is how many rules we have per style tag, it's 65000 in speedy mode\n        // it's 1 in dev because we insert source maps that map a single rule to a location\n        // and you can only have one source map per style tag\n        if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {\n            this._insertTag(createStyleElement(this));\n        }\n        var tag = this.tags[this.tags.length - 1];\n        if (true) {\n            var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;\n            if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {\n                // this would only cause problem in speedy mode\n                // but we don't want enabling speedy to affect the observable behavior\n                // so we report this error at all times\n                console.error(\"You're attempting to insert the following rule:\\n\" + rule + \"\\n\\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.\");\n            }\n            this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;\n        }\n        if (this.isSpeedy) {\n            var sheet = sheetForTag(tag);\n            try {\n                // this is the ultrafast version, works across browsers\n                // the big drawback is that the css won't be editable in devtools\n                sheet.insertRule(rule, sheet.cssRules.length);\n            } catch (e) {\n                if ( true && !/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {\n                    console.error('There was a problem inserting the following rule: \"' + rule + '\"', e);\n                }\n            }\n        } else {\n            tag.appendChild(document.createTextNode(rule));\n        }\n        this.ctr++;\n    };\n    _proto.flush = function flush() {\n        // $FlowFixMe\n        this.tags.forEach(function(tag) {\n            return tag.parentNode && tag.parentNode.removeChild(tag);\n        });\n        this.tags = [];\n        this.ctr = 0;\n        if (true) {\n            this._alreadyInsertedOrderInsensitiveRule = false;\n        }\n    };\n    return StyleSheet;\n}();\nvar MS = \"-ms-\";\nvar MOZ = \"-moz-\";\nvar WEBKIT = \"-webkit-\";\nvar COMMENT = \"comm\";\nvar RULESET = \"rule\";\nvar DECLARATION = \"decl\";\nvar IMPORT = \"@import\";\nvar KEYFRAMES = \"@keyframes\";\n/**\n * @param {number}\n * @return {number}\n */ var abs = Math.abs;\n/**\n * @param {number}\n * @return {string}\n */ var from = String.fromCharCode;\n/**\n * @param {object}\n * @return {object}\n */ var assign = Object.assign;\n/**\n * @param {string} value\n * @param {number} length\n * @return {number}\n */ function hash$2(value, length) {\n    return charat(value, 0) ^ 45 ? (((length << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;\n}\n/**\n * @param {string} value\n * @return {string}\n */ function trim(value) {\n    return value.trim();\n}\n/**\n * @param {string} value\n * @param {RegExp} pattern\n * @return {string?}\n */ function match(value, pattern) {\n    return (value = pattern.exec(value)) ? value[0] : value;\n}\n/**\n * @param {string} value\n * @param {(string|RegExp)} pattern\n * @param {string} replacement\n * @return {string}\n */ function replace(value, pattern, replacement) {\n    return value.replace(pattern, replacement);\n}\n/**\n * @param {string} value\n * @param {string} search\n * @return {number}\n */ function indexof(value, search) {\n    return value.indexOf(search);\n}\n/**\n * @param {string} value\n * @param {number} index\n * @return {number}\n */ function charat(value, index) {\n    return value.charCodeAt(index) | 0;\n}\n/**\n * @param {string} value\n * @param {number} begin\n * @param {number} end\n * @return {string}\n */ function substr(value, begin, end) {\n    return value.slice(begin, end);\n}\n/**\n * @param {string} value\n * @return {number}\n */ function strlen(value) {\n    return value.length;\n}\n/**\n * @param {any[]} value\n * @return {number}\n */ function sizeof(value) {\n    return value.length;\n}\n/**\n * @param {any} value\n * @param {any[]} array\n * @return {any}\n */ function append(value, array) {\n    return array.push(value), value;\n}\n/**\n * @param {string[]} array\n * @param {function} callback\n * @return {string}\n */ function combine(array, callback) {\n    return array.map(callback).join(\"\");\n}\nvar line = 1;\nvar column = 1;\nvar length = 0;\nvar position = 0;\nvar character = 0;\nvar characters = \"\";\n/**\n * @param {string} value\n * @param {object | null} root\n * @param {object | null} parent\n * @param {string} type\n * @param {string[] | string} props\n * @param {object[] | string} children\n * @param {number} length\n */ function node(value, root, parent, type, props, children, length) {\n    return {\n        value: value,\n        root: root,\n        parent: parent,\n        type: type,\n        props: props,\n        children: children,\n        line: line,\n        column: column,\n        length: length,\n        return: \"\"\n    };\n}\n/**\n * @param {object} root\n * @param {object} props\n * @return {object}\n */ function copy(root, props) {\n    return assign(node(\"\", null, null, \"\", null, null, 0), root, {\n        length: -root.length\n    }, props);\n}\n/**\n * @return {number}\n */ function char() {\n    return character;\n}\n/**\n * @return {number}\n */ function prev() {\n    character = position > 0 ? charat(characters, --position) : 0;\n    if (column--, character === 10) column = 1, line--;\n    return character;\n}\n/**\n * @return {number}\n */ function next() {\n    character = position < length ? charat(characters, position++) : 0;\n    if (column++, character === 10) column = 1, line++;\n    return character;\n}\n/**\n * @return {number}\n */ function peek() {\n    return charat(characters, position);\n}\n/**\n * @return {number}\n */ function caret() {\n    return position;\n}\n/**\n * @param {number} begin\n * @param {number} end\n * @return {string}\n */ function slice(begin, end) {\n    return substr(characters, begin, end);\n}\n/**\n * @param {number} type\n * @return {number}\n */ function token(type) {\n    switch(type){\n        // \\0 \\t \\n \\r \\s whitespace token\n        case 0:\n        case 9:\n        case 10:\n        case 13:\n        case 32:\n            return 5;\n        // ! + , / > @ ~ isolate token\n        case 33:\n        case 43:\n        case 44:\n        case 47:\n        case 62:\n        case 64:\n        case 126:\n        // ; { } breakpoint token\n        case 59:\n        case 123:\n        case 125:\n            return 4;\n        // : accompanied token\n        case 58:\n            return 3;\n        // \" ' ( [ opening delimit token\n        case 34:\n        case 39:\n        case 40:\n        case 91:\n            return 2;\n        // ) ] closing delimit token\n        case 41:\n        case 93:\n            return 1;\n    }\n    return 0;\n}\n/**\n * @param {string} value\n * @return {any[]}\n */ function alloc(value) {\n    return line = column = 1, length = strlen(characters = value), position = 0, [];\n}\n/**\n * @param {any} value\n * @return {any}\n */ function dealloc(value) {\n    return characters = \"\", value;\n}\n/**\n * @param {number} type\n * @return {string}\n */ function delimit(type) {\n    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));\n}\n/**\n * @param {number} type\n * @return {string}\n */ function whitespace(type) {\n    while(character = peek())if (character < 33) next();\n    else break;\n    return token(type) > 2 || token(character) > 3 ? \"\" : \" \";\n}\n/**\n * @param {number} index\n * @param {number} count\n * @return {string}\n */ function escaping(index, count) {\n    while(--count && next())// not 0-9 A-F a-f\n    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97) break;\n    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));\n}\n/**\n * @param {number} type\n * @return {number}\n */ function delimiter(type) {\n    while(next())switch(character){\n        // ] ) \" '\n        case type:\n            return position;\n        // \" '\n        case 34:\n        case 39:\n            if (type !== 34 && type !== 39) delimiter(character);\n            break;\n        // (\n        case 40:\n            if (type === 41) delimiter(type);\n            break;\n        // \\\n        case 92:\n            next();\n            break;\n    }\n    return position;\n}\n/**\n * @param {number} type\n * @param {number} index\n * @return {number}\n */ function commenter(type, index) {\n    while(next())// //\n    if (type + character === 47 + 10) break;\n    else if (type + character === 42 + 42 && peek() === 47) break;\n    return \"/*\" + slice(index, position - 1) + \"*\" + from(type === 47 ? type : next());\n}\n/**\n * @param {number} index\n * @return {string}\n */ function identifier(index) {\n    while(!token(peek()))next();\n    return slice(index, position);\n}\n/**\n * @param {string} value\n * @return {object[]}\n */ function compile(value) {\n    return dealloc(parse(\"\", null, null, null, [\n        \"\"\n    ], value = alloc(value), 0, [\n        0\n    ], value));\n}\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {string[]} rule\n * @param {string[]} rules\n * @param {string[]} rulesets\n * @param {number[]} pseudo\n * @param {number[]} points\n * @param {string[]} declarations\n * @return {object}\n */ function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {\n    var index = 0;\n    var offset = 0;\n    var length = pseudo;\n    var atrule = 0;\n    var property = 0;\n    var previous = 0;\n    var variable = 1;\n    var scanning = 1;\n    var ampersand = 1;\n    var character = 0;\n    var type = \"\";\n    var props = rules;\n    var children = rulesets;\n    var reference = rule;\n    var characters = type;\n    while(scanning)switch(previous = character, character = next()){\n        // (\n        case 40:\n            if (previous != 108 && charat(characters, length - 1) == 58) {\n                if (indexof(characters += replace(delimit(character), \"&\", \"&\\f\"), \"&\\f\") != -1) ampersand = -1;\n                break;\n            }\n        // \" ' [\n        case 34:\n        case 39:\n        case 91:\n            characters += delimit(character);\n            break;\n        // \\t \\n \\r \\s\n        case 9:\n        case 10:\n        case 13:\n        case 32:\n            characters += whitespace(previous);\n            break;\n        // \\\n        case 92:\n            characters += escaping(caret() - 1, 7);\n            continue;\n        // /\n        case 47:\n            switch(peek()){\n                case 42:\n                case 47:\n                    append(comment(commenter(next(), caret()), root, parent), declarations);\n                    break;\n                default:\n                    characters += \"/\";\n            }\n            break;\n        // {\n        case 123 * variable:\n            points[index++] = strlen(characters) * ampersand;\n        // } ; \\0\n        case 125 * variable:\n        case 59:\n        case 0:\n            switch(character){\n                // \\0 }\n                case 0:\n                case 125:\n                    scanning = 0;\n                // ;\n                case 59 + offset:\n                    if (property > 0 && strlen(characters) - length) append(property > 32 ? declaration(characters + \";\", rule, parent, length - 1) : declaration(replace(characters, \" \", \"\") + \";\", rule, parent, length - 2), declarations);\n                    break;\n                // @ ;\n                case 59:\n                    characters += \";\";\n                // { rule/at-rule\n                default:\n                    append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);\n                    if (character === 123) if (offset === 0) parse(characters, root, reference, reference, props, rulesets, length, points, children);\n                    else switch(atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule){\n                        // d m s\n                        case 100:\n                        case 109:\n                        case 115:\n                            parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);\n                            break;\n                        default:\n                            parse(characters, reference, reference, reference, [\n                                \"\"\n                            ], children, 0, points, children);\n                    }\n            }\n            index = offset = property = 0, variable = ampersand = 1, type = characters = \"\", length = pseudo;\n            break;\n        // :\n        case 58:\n            length = 1 + strlen(characters), property = previous;\n        default:\n            if (variable < 1) {\n                if (character == 123) --variable;\n                else if (character == 125 && variable++ == 0 && prev() == 125) continue;\n            }\n            switch(characters += from(character), character * variable){\n                // &\n                case 38:\n                    ampersand = offset > 0 ? 1 : (characters += \"\\f\", -1);\n                    break;\n                // ,\n                case 44:\n                    points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;\n                    break;\n                // @\n                case 64:\n                    // -\n                    if (peek() === 45) characters += delimit(next());\n                    atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;\n                    break;\n                // -\n                case 45:\n                    if (previous === 45 && strlen(characters) == 2) variable = 0;\n            }\n    }\n    return rulesets;\n}\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} index\n * @param {number} offset\n * @param {string[]} rules\n * @param {number[]} points\n * @param {string} type\n * @param {string[]} props\n * @param {string[]} children\n * @param {number} length\n * @return {object}\n */ function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length) {\n    var post = offset - 1;\n    var rule = offset === 0 ? rules : [\n        \"\"\n    ];\n    var size = sizeof(rule);\n    for(var i = 0, j = 0, k = 0; i < index; ++i)for(var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)if (z = trim(j > 0 ? rule[x] + \" \" + y : replace(y, /&\\f/g, rule[x]))) props[k++] = z;\n    return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length);\n}\n/**\n * @param {number} value\n * @param {object} root\n * @param {object?} parent\n * @return {object}\n */ function comment(value, root, parent) {\n    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);\n}\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} length\n * @return {object}\n */ function declaration(value, root, parent, length) {\n    return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length);\n}\n/**\n * @param {object[]} children\n * @param {function} callback\n * @return {string}\n */ function serialize(children, callback) {\n    var output = \"\";\n    var length = sizeof(children);\n    for(var i = 0; i < length; i++)output += callback(children[i], i, children, callback) || \"\";\n    return output;\n}\n/**\n * @param {object} element\n * @param {number} index\n * @param {object[]} children\n * @param {function} callback\n * @return {string}\n */ function stringify(element, index, children, callback) {\n    switch(element.type){\n        case IMPORT:\n        case DECLARATION:\n            return element.return = element.return || element.value;\n        case COMMENT:\n            return \"\";\n        case KEYFRAMES:\n            return element.return = element.value + \"{\" + serialize(element.children, callback) + \"}\";\n        case RULESET:\n            element.value = element.props.join(\",\");\n    }\n    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + \"{\" + children + \"}\" : \"\";\n}\n/**\n * @param {function[]} collection\n * @return {function}\n */ function middleware(collection) {\n    var length = sizeof(collection);\n    return function(element, index, children, callback) {\n        var output = \"\";\n        for(var i = 0; i < length; i++)output += collection[i](element, index, children, callback) || \"\";\n        return output;\n    };\n}\n/**\n * @param {function} callback\n * @return {function}\n */ function rulesheet(callback) {\n    return function(element) {\n        if (!element.root) {\n            if (element = element.return) callback(element);\n        }\n    };\n}\nvar weakMemoize = function weakMemoize(func) {\n    // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps\n    var cache = new WeakMap();\n    return function(arg) {\n        if (cache.has(arg)) {\n            // $FlowFixMe\n            return cache.get(arg);\n        }\n        var ret = func(arg);\n        cache.set(arg, ret);\n        return ret;\n    };\n};\nvar identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {\n    var previous = 0;\n    var character = 0;\n    while(true){\n        previous = character;\n        character = peek(); // &\\f\n        if (previous === 38 && character === 12) {\n            points[index] = 1;\n        }\n        if (token(character)) {\n            break;\n        }\n        next();\n    }\n    return slice(begin, position);\n};\nvar toRules = function toRules(parsed, points) {\n    // pretend we've started with a comma\n    var index = -1;\n    var character = 44;\n    do {\n        switch(token(character)){\n            case 0:\n                // &\\f\n                if (character === 38 && peek() === 12) {\n                    // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings\n                    // stylis inserts \\f after & to know when & where it should replace this sequence with the context selector\n                    // and when it should just concatenate the outer and inner selectors\n                    // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here\n                    points[index] = 1;\n                }\n                parsed[index] += identifierWithPointTracking(position - 1, points, index);\n                break;\n            case 2:\n                parsed[index] += delimit(character);\n                break;\n            case 4:\n                // comma\n                if (character === 44) {\n                    // colon\n                    parsed[++index] = peek() === 58 ? \"&\\f\" : \"\";\n                    points[index] = parsed[index].length;\n                    break;\n                }\n            // fallthrough\n            default:\n                parsed[index] += from(character);\n        }\n    }while (character = next());\n    return parsed;\n};\nvar getRules = function getRules(value, points) {\n    return dealloc(toRules(alloc(value), points));\n}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11\nvar fixedElements = /* #__PURE__ */ new WeakMap();\nvar compat = function compat(element) {\n    if (element.type !== \"rule\" || !element.parent || // positive .length indicates that this rule contains pseudo\n    // negative .length indicates that this rule has been already prefixed\n    element.length < 1) {\n        return;\n    }\n    var value = element.value, parent = element.parent;\n    var isImplicitRule = element.column === parent.column && element.line === parent.line;\n    while(parent.type !== \"rule\"){\n        parent = parent.parent;\n        if (!parent) return;\n    } // short-circuit for the simplest case\n    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {\n        return;\n    } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)\n    // then the props has already been manipulated beforehand as they that array is shared between it and its \"rule parent\"\n    if (isImplicitRule) {\n        return;\n    }\n    fixedElements.set(element, true);\n    var points = [];\n    var rules = getRules(value, points);\n    var parentRules = parent.props;\n    for(var i = 0, k = 0; i < rules.length; i++){\n        for(var j = 0; j < parentRules.length; j++, k++){\n            element.props[k] = points[i] ? rules[i].replace(/&\\f/g, parentRules[j]) : parentRules[j] + \" \" + rules[i];\n        }\n    }\n};\nvar removeLabel = function removeLabel(element) {\n    if (element.type === \"decl\") {\n        var value = element.value;\n        if (value.charCodeAt(0) === 108 && // charcode for b\n        value.charCodeAt(2) === 98) {\n            // this ignores label\n            element[\"return\"] = \"\";\n            element.value = \"\";\n        }\n    }\n};\nvar ignoreFlag = \"emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason\";\nvar isIgnoringComment = function isIgnoringComment(element) {\n    return element.type === \"comm\" && element.children.indexOf(ignoreFlag) > -1;\n};\nvar createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {\n    return function(element, index, children) {\n        if (element.type !== \"rule\" || cache.compat) return;\n        var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);\n        if (unsafePseudoClasses) {\n            var isNested = element.parent === children[0]; // in nested rules comments become children of the \"auto-inserted\" rule\n            //\n            // considering this input:\n            // .a {\n            //   .b /* comm */ {}\n            //   color: hotpink;\n            // }\n            // we get output corresponding to this:\n            // .a {\n            //   & {\n            //     /* comm */\n            //     color: hotpink;\n            //   }\n            //   .b {}\n            // }\n            var commentContainer = isNested ? children[0].children : children;\n            for(var i = commentContainer.length - 1; i >= 0; i--){\n                var node = commentContainer[i];\n                if (node.line < element.line) {\n                    break;\n                } // it is quite weird but comments are *usually* put at `column: element.column - 1`\n                // so we seek *from the end* for the node that is earlier than the rule's `element` and check that\n                // this will also match inputs like this:\n                // .a {\n                //   /* comm */\n                //   .b {}\n                // }\n                //\n                // but that is fine\n                //\n                // it would be the easiest to change the placement of the comment to be the first child of the rule:\n                // .a {\n                //   .b { /* comm */ }\n                // }\n                // with such inputs we wouldn't have to search for the comment at all\n                // TODO: consider changing this comment placement in the next major version\n                if (node.column < element.column) {\n                    if (isIgnoringComment(node)) {\n                        return;\n                    }\n                    break;\n                }\n            }\n            unsafePseudoClasses.forEach(function(unsafePseudoClass) {\n                console.error('The pseudo class \"' + unsafePseudoClass + '\" is potentially unsafe when doing server-side rendering. Try changing it to \"' + unsafePseudoClass.split(\"-child\")[0] + '-of-type\".');\n            });\n        }\n    };\n};\nvar isImportRule = function isImportRule(element) {\n    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;\n};\nvar isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {\n    for(var i = index - 1; i >= 0; i--){\n        if (!isImportRule(children[i])) {\n            return true;\n        }\n    }\n    return false;\n}; // use this to remove incorrect elements from further processing\n// so they don't get handed to the `sheet` (or anything else)\n// as that could potentially lead to additional logs which in turn could be overhelming to the user\nvar nullifyElement = function nullifyElement(element) {\n    element.type = \"\";\n    element.value = \"\";\n    element[\"return\"] = \"\";\n    element.children = \"\";\n    element.props = \"\";\n};\nvar incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {\n    if (!isImportRule(element)) {\n        return;\n    }\n    if (element.parent) {\n        console.error(\"`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.\");\n        nullifyElement(element);\n    } else if (isPrependedWithRegularRules(index, children)) {\n        console.error(\"`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.\");\n        nullifyElement(element);\n    }\n};\n/* eslint-disable no-fallthrough */ function prefix(value, length) {\n    switch(hash$2(value, length)){\n        // color-adjust\n        case 5103:\n            return WEBKIT + \"print-\" + value + value;\n        // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)\n        case 5737:\n        case 4201:\n        case 3177:\n        case 3433:\n        case 1641:\n        case 4457:\n        case 2921:\n        case 5572:\n        case 6356:\n        case 5844:\n        case 3191:\n        case 6645:\n        case 3005:\n        case 6391:\n        case 5879:\n        case 5623:\n        case 6135:\n        case 4599:\n        case 4855:\n        case 4215:\n        case 6389:\n        case 5109:\n        case 5365:\n        case 5621:\n        case 3829:\n            return WEBKIT + value + value;\n        // appearance, user-select, transform, hyphens, text-size-adjust\n        case 5349:\n        case 4246:\n        case 4810:\n        case 6968:\n        case 2756:\n            return WEBKIT + value + MOZ + value + MS + value + value;\n        // flex, flex-direction\n        case 6828:\n        case 4268:\n            return WEBKIT + value + MS + value + value;\n        // order\n        case 6165:\n            return WEBKIT + value + MS + \"flex-\" + value + value;\n        // align-items\n        case 5187:\n            return WEBKIT + value + replace(value, /(\\w+).+(:[^]+)/, WEBKIT + \"box-$1$2\" + MS + \"flex-$1$2\") + value;\n        // align-self\n        case 5443:\n            return WEBKIT + value + MS + \"flex-item-\" + replace(value, /flex-|-self/, \"\") + value;\n        // align-content\n        case 4675:\n            return WEBKIT + value + MS + \"flex-line-pack\" + replace(value, /align-content|flex-|-self/, \"\") + value;\n        // flex-shrink\n        case 5548:\n            return WEBKIT + value + MS + replace(value, \"shrink\", \"negative\") + value;\n        // flex-basis\n        case 5292:\n            return WEBKIT + value + MS + replace(value, \"basis\", \"preferred-size\") + value;\n        // flex-grow\n        case 6060:\n            return WEBKIT + \"box-\" + replace(value, \"-grow\", \"\") + WEBKIT + value + MS + replace(value, \"grow\", \"positive\") + value;\n        // transition\n        case 4554:\n            return WEBKIT + replace(value, /([^-])(transform)/g, \"$1\" + WEBKIT + \"$2\") + value;\n        // cursor\n        case 6187:\n            return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + \"$1\"), /(image-set)/, WEBKIT + \"$1\"), value, \"\") + value;\n        // background, background-image\n        case 5495:\n        case 3959:\n            return replace(value, /(image-set\\([^]*)/, WEBKIT + \"$1\" + \"$`$1\");\n        // justify-content\n        case 4968:\n            return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + \"box-pack:$3\" + MS + \"flex-pack:$3\"), /s.+-b[^;]+/, \"justify\") + WEBKIT + value + value;\n        // (margin|padding)-inline-(start|end)\n        case 4095:\n        case 3583:\n        case 4068:\n        case 2532:\n            return replace(value, /(.+)-inline(.+)/, WEBKIT + \"$1$2\") + value;\n        // (min|max)?(width|height|inline-size|block-size)\n        case 8116:\n        case 7059:\n        case 5753:\n        case 5535:\n        case 5445:\n        case 5701:\n        case 4933:\n        case 4677:\n        case 5533:\n        case 5789:\n        case 5021:\n        case 4765:\n            // stretch, max-content, min-content, fill-available\n            if (strlen(value) - 1 - length > 6) switch(charat(value, length + 1)){\n                // (m)ax-content, (m)in-content\n                case 109:\n                    // -\n                    if (charat(value, length + 4) !== 45) break;\n                // (f)ill-available, (f)it-content\n                case 102:\n                    return replace(value, /(.+:)(.+)-([^]+)/, \"$1\" + WEBKIT + \"$2-$3\" + \"$1\" + MOZ + (charat(value, length + 3) == 108 ? \"$3\" : \"$2-$3\")) + value;\n                // (s)tretch\n                case 115:\n                    return ~indexof(value, \"stretch\") ? prefix(replace(value, \"stretch\", \"fill-available\"), length) + value : value;\n            }\n            break;\n        // position: sticky\n        case 4949:\n            // (s)ticky?\n            if (charat(value, length + 1) !== 115) break;\n        // display: (flex|inline-flex)\n        case 6444:\n            switch(charat(value, strlen(value) - 3 - (~indexof(value, \"!important\") && 10))){\n                // stic(k)y\n                case 107:\n                    return replace(value, \":\", \":\" + WEBKIT) + value;\n                // (inline-)?fl(e)x\n                case 101:\n                    return replace(value, /(.+:)([^;!]+)(;|!.+)?/, \"$1\" + WEBKIT + (charat(value, 14) === 45 ? \"inline-\" : \"\") + \"box$3\" + \"$1\" + WEBKIT + \"$2$3\" + \"$1\" + MS + \"$2box$3\") + value;\n            }\n            break;\n        // writing-mode\n        case 5936:\n            switch(charat(value, length + 11)){\n                // vertical-l(r)\n                case 114:\n                    return WEBKIT + value + MS + replace(value, /[svh]\\w+-[tblr]{2}/, \"tb\") + value;\n                // vertical-r(l)\n                case 108:\n                    return WEBKIT + value + MS + replace(value, /[svh]\\w+-[tblr]{2}/, \"tb-rl\") + value;\n                // horizontal(-)tb\n                case 45:\n                    return WEBKIT + value + MS + replace(value, /[svh]\\w+-[tblr]{2}/, \"lr\") + value;\n            }\n            return WEBKIT + value + MS + value + value;\n    }\n    return value;\n}\nvar prefixer = function prefixer(element, index, children, callback) {\n    if (element.length > -1) {\n        if (!element[\"return\"]) switch(element.type){\n            case DECLARATION:\n                element[\"return\"] = prefix(element.value, element.length);\n                break;\n            case KEYFRAMES:\n                return serialize([\n                    copy(element, {\n                        value: replace(element.value, \"@\", \"@\" + WEBKIT)\n                    })\n                ], callback);\n            case RULESET:\n                if (element.length) return combine(element.props, function(value) {\n                    switch(match(value, /(::plac\\w+|:read-\\w+)/)){\n                        // :read-(only|write)\n                        case \":read-only\":\n                        case \":read-write\":\n                            return serialize([\n                                copy(element, {\n                                    props: [\n                                        replace(value, /:(read-\\w+)/, \":\" + MOZ + \"$1\")\n                                    ]\n                                })\n                            ], callback);\n                        // :placeholder\n                        case \"::placeholder\":\n                            return serialize([\n                                copy(element, {\n                                    props: [\n                                        replace(value, /:(plac\\w+)/, \":\" + WEBKIT + \"input-$1\")\n                                    ]\n                                }),\n                                copy(element, {\n                                    props: [\n                                        replace(value, /:(plac\\w+)/, \":\" + MOZ + \"$1\")\n                                    ]\n                                }),\n                                copy(element, {\n                                    props: [\n                                        replace(value, /:(plac\\w+)/, MS + \"input-$1\")\n                                    ]\n                                })\n                            ], callback);\n                    }\n                    return \"\";\n                });\n        }\n    }\n};\nvar isBrowser$5 = typeof document !== \"undefined\";\nvar getServerStylisCache = isBrowser$5 ? undefined : weakMemoize(function() {\n    return memoize(function() {\n        var cache = {};\n        return function(name) {\n            return cache[name];\n        };\n    });\n});\nvar defaultStylisPlugins = [\n    prefixer\n];\nvar createCache = function createCache(options) {\n    var key = options.key;\n    if ( true && !key) {\n        throw new Error(\"You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\\n\" + 'If multiple caches share the same key they might \"fight\" for each other\\'s style elements.');\n    }\n    if (isBrowser$5 && key === \"css\") {\n        var ssrStyles = document.querySelectorAll(\"style[data-emotion]:not([data-s])\"); // get SSRed styles out of the way of React's hydration\n        // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)\n        // note this very very intentionally targets all style elements regardless of the key to ensure\n        // that creating a cache works inside of render of a React component\n        Array.prototype.forEach.call(ssrStyles, function(node) {\n            // we want to only move elements which have a space in the data-emotion attribute value\n            // because that indicates that it is an Emotion 11 server-side rendered style elements\n            // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector\n            // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)\n            // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles\n            // will not result in the Emotion 10 styles being destroyed\n            var dataEmotionAttribute = node.getAttribute(\"data-emotion\");\n            if (dataEmotionAttribute.indexOf(\" \") === -1) {\n                return;\n            }\n            document.head.appendChild(node);\n            node.setAttribute(\"data-s\", \"\");\n        });\n    }\n    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;\n    if (true) {\n        // $FlowFixMe\n        if (/[^a-z-]/.test(key)) {\n            throw new Error('Emotion key must only contain lower case alphabetical characters and - but \"' + key + '\" was passed');\n        }\n    }\n    var inserted = {};\n    var container;\n    var nodesToHydrate = [];\n    if (isBrowser$5) {\n        container = options.container || document.head;\n        Array.prototype.forEach.call(// means that the style elements we're looking at are only Emotion 11 server-rendered style elements\n        document.querySelectorAll('style[data-emotion^=\"' + key + ' \"]'), function(node) {\n            var attrib = node.getAttribute(\"data-emotion\").split(\" \"); // $FlowFixMe\n            for(var i = 1; i < attrib.length; i++){\n                inserted[attrib[i]] = true;\n            }\n            nodesToHydrate.push(node);\n        });\n    }\n    var _insert;\n    var omnipresentPlugins = [\n        compat,\n        removeLabel\n    ];\n    if (true) {\n        omnipresentPlugins.push(createUnsafeSelectorsAlarm({\n            get compat () {\n                return cache.compat;\n            }\n        }), incorrectImportAlarm);\n    }\n    if (isBrowser$5) {\n        var currentSheet;\n        var finalizingPlugins = [\n            stringify,\n             true ? function(element) {\n                if (!element.root) {\n                    if (element[\"return\"]) {\n                        currentSheet.insert(element[\"return\"]);\n                    } else if (element.value && element.type !== COMMENT) {\n                        // insert empty rule in non-production environments\n                        // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet\n                        currentSheet.insert(element.value + \"{}\");\n                    }\n                }\n            } : 0\n        ];\n        var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));\n        var stylis = function stylis(styles) {\n            return serialize(compile(styles), serializer);\n        };\n        _insert = function insert(selector, serialized, sheet, shouldCache) {\n            currentSheet = sheet;\n            if ( true && serialized.map !== undefined) {\n                currentSheet = {\n                    insert: function insert(rule) {\n                        sheet.insert(rule + serialized.map);\n                    }\n                };\n            }\n            stylis(selector ? selector + \"{\" + serialized.styles + \"}\" : serialized.styles);\n            if (shouldCache) {\n                cache.inserted[serialized.name] = true;\n            }\n        };\n    } else {\n        var _finalizingPlugins = [\n            stringify\n        ];\n        var _serializer = middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));\n        var _stylis = function _stylis(styles) {\n            return serialize(compile(styles), _serializer);\n        }; // $FlowFixMe\n        var serverStylisCache = getServerStylisCache(stylisPlugins)(key);\n        var getRules = function getRules(selector, serialized) {\n            var name = serialized.name;\n            if (serverStylisCache[name] === undefined) {\n                serverStylisCache[name] = _stylis(selector ? selector + \"{\" + serialized.styles + \"}\" : serialized.styles);\n            }\n            return serverStylisCache[name];\n        };\n        _insert = function _insert(selector, serialized, sheet, shouldCache) {\n            var name = serialized.name;\n            var rules = getRules(selector, serialized);\n            if (cache.compat === undefined) {\n                // in regular mode, we don't set the styles on the inserted cache\n                // since we don't need to and that would be wasting memory\n                // we return them so that they are rendered in a style tag\n                if (shouldCache) {\n                    cache.inserted[name] = true;\n                }\n                if (// because if people do ssr in tests, the source maps showing up would be annoying\n                 true && serialized.map !== undefined) {\n                    return rules + serialized.map;\n                }\n                return rules;\n            } else {\n                // in compat mode, we put the styles on the inserted cache so\n                // that emotion-server can pull out the styles\n                // except when we don't want to cache it which was in Global but now\n                // is nowhere but we don't want to do a major right now\n                // and just in case we're going to leave the case here\n                // it's also not affecting client side bundle size\n                // so it's really not a big deal\n                if (shouldCache) {\n                    cache.inserted[name] = rules;\n                } else {\n                    return rules;\n                }\n            }\n        };\n    }\n    var cache = {\n        key: key,\n        sheet: new StyleSheet({\n            key: key,\n            container: container,\n            nonce: options.nonce,\n            speedy: options.speedy,\n            prepend: options.prepend,\n            insertionPoint: options.insertionPoint\n        }),\n        nonce: options.nonce,\n        inserted: inserted,\n        registered: {},\n        insert: _insert\n    };\n    cache.sheet.hydrate(nodesToHydrate);\n    return cache;\n};\nvar isBrowser$4 = typeof document !== \"undefined\";\nfunction getRegisteredStyles$1(registered, registeredStyles, classNames) {\n    var rawClassName = \"\";\n    classNames.split(\" \").forEach(function(className) {\n        if (registered[className] !== undefined) {\n            registeredStyles.push(registered[className] + \";\");\n        } else {\n            rawClassName += className + \" \";\n        }\n    });\n    return rawClassName;\n}\nvar registerStyles$1 = function registerStyles(cache, serialized, isStringTag) {\n    var className = cache.key + \"-\" + serialized.name;\n    if (// class name could be used further down\n    // the tree but if it's a string tag, we know it won't\n    // so we don't have to add it to registered cache.\n    // this improves memory usage since we can avoid storing the whole style string\n    (isStringTag === false || // we need to always store it if we're in compat mode and\n    // in node since emotion-server relies on whether a style is in\n    // the registered cache to know whether a style is global or not\n    // also, note that this check will be dead code eliminated in the browser\n    isBrowser$4 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {\n        cache.registered[className] = serialized.styles;\n    }\n};\nvar insertStyles$1 = function insertStyles(cache, serialized, isStringTag) {\n    registerStyles$1(cache, serialized, isStringTag);\n    var className = cache.key + \"-\" + serialized.name;\n    if (cache.inserted[serialized.name] === undefined) {\n        var stylesForSSR = \"\";\n        var current = serialized;\n        do {\n            var maybeStyles = cache.insert(serialized === current ? \".\" + className : \"\", current, cache.sheet, true);\n            if (!isBrowser$4 && maybeStyles !== undefined) {\n                stylesForSSR += maybeStyles;\n            }\n            current = current.next;\n        }while (current !== undefined);\n        if (!isBrowser$4 && stylesForSSR.length !== 0) {\n            return stylesForSSR;\n        }\n    }\n};\n/* eslint-disable */ // Inspired by https://github.com/garycourt/murmurhash-js\n// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86\nfunction murmur2$1(str) {\n    // 'm' and 'r' are mixing constants generated offline.\n    // They're not really 'magic', they just happen to work well.\n    // const m = 0x5bd1e995;\n    // const r = 24;\n    // Initialize the hash\n    var h = 0; // Mix 4 bytes at a time into the hash\n    var k, i = 0, len = str.length;\n    for(; len >= 4; ++i, len -= 4){\n        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n        k = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);\n        k ^= /* k >>> r: */ k >>> 24;\n        h = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^ /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n    } // Handle the last few bytes of the input array\n    switch(len){\n        case 3:\n            h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n            h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n            h ^= str.charCodeAt(i) & 0xff;\n            h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n    } // Do a few final mixes of the hash to ensure the last few\n    // bytes are well-incorporated.\n    h ^= h >>> 13;\n    h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n    return ((h ^ h >>> 15) >>> 0).toString(36);\n}\nvar unitlessKeys$1 = {\n    animationIterationCount: 1,\n    borderImageOutset: 1,\n    borderImageSlice: 1,\n    borderImageWidth: 1,\n    boxFlex: 1,\n    boxFlexGroup: 1,\n    boxOrdinalGroup: 1,\n    columnCount: 1,\n    columns: 1,\n    flex: 1,\n    flexGrow: 1,\n    flexPositive: 1,\n    flexShrink: 1,\n    flexNegative: 1,\n    flexOrder: 1,\n    gridRow: 1,\n    gridRowEnd: 1,\n    gridRowSpan: 1,\n    gridRowStart: 1,\n    gridColumn: 1,\n    gridColumnEnd: 1,\n    gridColumnSpan: 1,\n    gridColumnStart: 1,\n    msGridRow: 1,\n    msGridRowSpan: 1,\n    msGridColumn: 1,\n    msGridColumnSpan: 1,\n    fontWeight: 1,\n    lineHeight: 1,\n    opacity: 1,\n    order: 1,\n    orphans: 1,\n    tabSize: 1,\n    widows: 1,\n    zIndex: 1,\n    zoom: 1,\n    WebkitLineClamp: 1,\n    // SVG-related properties\n    fillOpacity: 1,\n    floodOpacity: 1,\n    stopOpacity: 1,\n    strokeDasharray: 1,\n    strokeDashoffset: 1,\n    strokeMiterlimit: 1,\n    strokeOpacity: 1,\n    strokeWidth: 1\n};\nvar ILLEGAL_ESCAPE_SEQUENCE_ERROR$2 = \"You have illegal escape sequence in your template literal, most likely inside content's property value.\\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \\\"content: '\\\\00d7';\\\" should become \\\"content: '\\\\\\\\00d7';\\\".\\nYou can read more about this here:\\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\";\nvar UNDEFINED_AS_OBJECT_KEY_ERROR$1 = \"You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).\";\nvar hyphenateRegex$1 = /[A-Z]|^ms/g;\nvar animationRegex$1 = /_EMO_([^_]+?)_([^]*?)_EMO_/g;\nvar isCustomProperty$1 = function isCustomProperty(property) {\n    return property.charCodeAt(1) === 45;\n};\nvar isProcessableValue$1 = function isProcessableValue(value) {\n    return value != null && typeof value !== \"boolean\";\n};\nvar processStyleName$1 = /* #__PURE__ */ memoize(function(styleName) {\n    return isCustomProperty$1(styleName) ? styleName : styleName.replace(hyphenateRegex$1, \"-$&\").toLowerCase();\n});\nvar processStyleValue$1 = function processStyleValue(key, value) {\n    switch(key){\n        case \"animation\":\n        case \"animationName\":\n            {\n                if (typeof value === \"string\") {\n                    return value.replace(animationRegex$1, function(match, p1, p2) {\n                        cursor$1 = {\n                            name: p1,\n                            styles: p2,\n                            next: cursor$1\n                        };\n                        return p1;\n                    });\n                }\n            }\n    }\n    if (unitlessKeys$1[key] !== 1 && !isCustomProperty$1(key) && typeof value === \"number\" && value !== 0) {\n        return value + \"px\";\n    }\n    return value;\n};\nif (true) {\n    var contentValuePattern$1 = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\\(|(no-)?(open|close)-quote/;\n    var contentValues$1 = [\n        \"normal\",\n        \"none\",\n        \"initial\",\n        \"inherit\",\n        \"unset\"\n    ];\n    var oldProcessStyleValue$1 = processStyleValue$1;\n    var msPattern$1 = /^-ms-/;\n    var hyphenPattern$1 = /-(.)/g;\n    var hyphenatedCache$1 = {};\n    processStyleValue$1 = function processStyleValue(key, value) {\n        if (key === \"content\") {\n            if (typeof value !== \"string\" || contentValues$1.indexOf(value) === -1 && !contentValuePattern$1.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '\"' && value.charAt(0) !== \"'\")) {\n                throw new Error(\"You seem to be using a value for 'content' without quotes, try replacing it with `content: '\\\"\" + value + \"\\\"'`\");\n            }\n        }\n        var processed = oldProcessStyleValue$1(key, value);\n        if (processed !== \"\" && !isCustomProperty$1(key) && key.indexOf(\"-\") !== -1 && hyphenatedCache$1[key] === undefined) {\n            hyphenatedCache$1[key] = true;\n            console.error(\"Using kebab-case for css properties in objects is not supported. Did you mean \" + key.replace(msPattern$1, \"ms-\").replace(hyphenPattern$1, function(str, _char) {\n                return _char.toUpperCase();\n            }) + \"?\");\n        }\n        return processed;\n    };\n}\nvar noComponentSelectorMessage$1 = \"Component selectors can only be used in conjunction with \" + \"@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware \" + \"compiler transform.\";\nfunction handleInterpolation$1(mergedProps, registered, interpolation) {\n    if (interpolation == null) {\n        return \"\";\n    }\n    if (interpolation.__emotion_styles !== undefined) {\n        if ( true && interpolation.toString() === \"NO_COMPONENT_SELECTOR\") {\n            throw new Error(noComponentSelectorMessage$1);\n        }\n        return interpolation;\n    }\n    switch(typeof interpolation){\n        case \"boolean\":\n            {\n                return \"\";\n            }\n        case \"object\":\n            {\n                if (interpolation.anim === 1) {\n                    cursor$1 = {\n                        name: interpolation.name,\n                        styles: interpolation.styles,\n                        next: cursor$1\n                    };\n                    return interpolation.name;\n                }\n                if (interpolation.styles !== undefined) {\n                    var next = interpolation.next;\n                    if (next !== undefined) {\n                        // not the most efficient thing ever but this is a pretty rare case\n                        // and there will be very few iterations of this generally\n                        while(next !== undefined){\n                            cursor$1 = {\n                                name: next.name,\n                                styles: next.styles,\n                                next: cursor$1\n                            };\n                            next = next.next;\n                        }\n                    }\n                    var styles = interpolation.styles + \";\";\n                    if ( true && interpolation.map !== undefined) {\n                        styles += interpolation.map;\n                    }\n                    return styles;\n                }\n                return createStringFromObject$1(mergedProps, registered, interpolation);\n            }\n        case \"function\":\n            {\n                if (mergedProps !== undefined) {\n                    var previousCursor = cursor$1;\n                    var result = interpolation(mergedProps);\n                    cursor$1 = previousCursor;\n                    return handleInterpolation$1(mergedProps, registered, result);\n                } else if (true) {\n                    console.error(\"Functions that are interpolated in css calls will be stringified.\\n\" + \"If you want to have a css call based on props, create a function that returns a css call like this\\n\" + \"let dynamicStyle = (props) => css`color: ${props.color}`\\n\" + \"It can be called directly with props or interpolated in a styled call like this\\n\" + \"let SomeComponent = styled('div')`${dynamicStyle}`\");\n                }\n                break;\n            }\n        case \"string\":\n            if (true) {\n                var matched = [];\n                var replaced = interpolation.replace(animationRegex$1, function(match, p1, p2) {\n                    var fakeVarName = \"animation\" + matched.length;\n                    matched.push(\"const \" + fakeVarName + \" = keyframes`\" + p2.replace(/^@keyframes animation-\\w+/, \"\") + \"`\");\n                    return \"${\" + fakeVarName + \"}\";\n                });\n                if (matched.length) {\n                    console.error(\"`keyframes` output got interpolated into plain string, please wrap it with `css`.\\n\\n\" + \"Instead of doing this:\\n\\n\" + [].concat(matched, [\n                        \"`\" + replaced + \"`\"\n                    ]).join(\"\\n\") + \"\\n\\nYou should wrap it with `css` like this:\\n\\n\" + (\"css`\" + replaced + \"`\"));\n                }\n            }\n            break;\n    } // finalize string values (regular strings and functions interpolated into css calls)\n    if (registered == null) {\n        return interpolation;\n    }\n    var cached = registered[interpolation];\n    return cached !== undefined ? cached : interpolation;\n}\nfunction createStringFromObject$1(mergedProps, registered, obj) {\n    var string = \"\";\n    if (Array.isArray(obj)) {\n        for(var i = 0; i < obj.length; i++){\n            string += handleInterpolation$1(mergedProps, registered, obj[i]) + \";\";\n        }\n    } else {\n        for(var _key in obj){\n            var value = obj[_key];\n            if (typeof value !== \"object\") {\n                if (registered != null && registered[value] !== undefined) {\n                    string += _key + \"{\" + registered[value] + \"}\";\n                } else if (isProcessableValue$1(value)) {\n                    string += processStyleName$1(_key) + \":\" + processStyleValue$1(_key, value) + \";\";\n                }\n            } else {\n                if (_key === \"NO_COMPONENT_SELECTOR\" && \"development\" !== \"production\") {\n                    throw new Error(noComponentSelectorMessage$1);\n                }\n                if (Array.isArray(value) && typeof value[0] === \"string\" && (registered == null || registered[value[0]] === undefined)) {\n                    for(var _i = 0; _i < value.length; _i++){\n                        if (isProcessableValue$1(value[_i])) {\n                            string += processStyleName$1(_key) + \":\" + processStyleValue$1(_key, value[_i]) + \";\";\n                        }\n                    }\n                } else {\n                    var interpolated = handleInterpolation$1(mergedProps, registered, value);\n                    switch(_key){\n                        case \"animation\":\n                        case \"animationName\":\n                            {\n                                string += processStyleName$1(_key) + \":\" + interpolated + \";\";\n                                break;\n                            }\n                        default:\n                            {\n                                if ( true && _key === \"undefined\") {\n                                    console.error(UNDEFINED_AS_OBJECT_KEY_ERROR$1);\n                                }\n                                string += _key + \"{\" + interpolated + \"}\";\n                            }\n                    }\n                }\n            }\n        }\n    }\n    return string;\n}\nvar labelPattern$1 = /label:\\s*([^\\s;\\n{]+)\\s*(;|$)/g;\nvar sourceMapPattern$1;\nif (true) {\n    sourceMapPattern$1 = /\\/\\*#\\ssourceMappingURL=data:application\\/json;\\S+\\s+\\*\\//g;\n} // this is the cursor for keyframes\n// keyframes are stored on the SerializedStyles object as a linked list\nvar cursor$1;\nvar serializeStyles$1 = function serializeStyles(args, registered, mergedProps) {\n    if (args.length === 1 && typeof args[0] === \"object\" && args[0] !== null && args[0].styles !== undefined) {\n        return args[0];\n    }\n    var stringMode = true;\n    var styles = \"\";\n    cursor$1 = undefined;\n    var strings = args[0];\n    if (strings == null || strings.raw === undefined) {\n        stringMode = false;\n        styles += handleInterpolation$1(mergedProps, registered, strings);\n    } else {\n        if ( true && strings[0] === undefined) {\n            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$2);\n        }\n        styles += strings[0];\n    } // we start at 1 since we've already handled the first arg\n    for(var i = 1; i < args.length; i++){\n        styles += handleInterpolation$1(mergedProps, registered, args[i]);\n        if (stringMode) {\n            if ( true && strings[i] === undefined) {\n                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$2);\n            }\n            styles += strings[i];\n        }\n    }\n    var sourceMap;\n    if (true) {\n        styles = styles.replace(sourceMapPattern$1, function(match) {\n            sourceMap = match;\n            return \"\";\n        });\n    } // using a global regex with .exec is stateful so lastIndex has to be reset each time\n    labelPattern$1.lastIndex = 0;\n    var identifierName = \"\";\n    var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5\n    while((match = labelPattern$1.exec(styles)) !== null){\n        identifierName += \"-\" + // $FlowFixMe we know it's not null\n        match[1];\n    }\n    var name = murmur2$1(styles) + identifierName;\n    if (true) {\n        // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)\n        return {\n            name: name,\n            styles: styles,\n            map: sourceMap,\n            next: cursor$1,\n            toString: function toString() {\n                return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n            }\n        };\n    }\n    return {\n        name: name,\n        styles: styles,\n        next: cursor$1\n    };\n};\nvar isBrowser$3 = typeof document !== \"undefined\";\nvar syncFallback = function syncFallback(create) {\n    return create();\n};\nvar useInsertionEffect = react__WEBPACK_IMPORTED_MODULE_0__[\"useInsertion\" + \"Effect\"] ? react__WEBPACK_IMPORTED_MODULE_0__[\"useInsertion\" + \"Effect\"] : false;\nvar useInsertionEffectAlwaysWithSyncFallback = !isBrowser$3 ? syncFallback : useInsertionEffect || syncFallback;\nvar isBrowser$2 = typeof document !== \"undefined\";\nvar hasOwnProperty = {}.hasOwnProperty;\nvar EmotionCacheContext = /* #__PURE__ */ /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(// because this module is primarily intended for the browser and node\n// but it's also required in react native and similar environments sometimes\n// and we could have a special build just for that\n// but this is much easier and the native packages\n// might use a different theme context in the future anyway\ntypeof HTMLElement !== \"undefined\" ? /* #__PURE__ */ createCache({\n    key: \"css\"\n}) : null);\nif (true) {\n    EmotionCacheContext.displayName = \"EmotionCacheContext\";\n}\nEmotionCacheContext.Provider;\nvar withEmotionCache = function withEmotionCache(func) {\n    // $FlowFixMe\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(props, ref) {\n        // the cache will never be null in the browser\n        var cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EmotionCacheContext);\n        return func(props, cache, ref);\n    });\n};\nif (!isBrowser$2) {\n    withEmotionCache = function withEmotionCache(func) {\n        return function(props) {\n            var cache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EmotionCacheContext);\n            if (cache === null) {\n                // yes, we're potentially creating this on every render\n                // it doesn't actually matter though since it's only on the server\n                // so there will only every be a single render\n                // that could change in the future because of suspense and etc. but for now,\n                // this works and i don't want to optimise for a future thing that we aren't sure about\n                cache = createCache({\n                    key: \"css\"\n                });\n                return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(EmotionCacheContext.Provider, {\n                    value: cache\n                }, func(props, cache));\n            } else {\n                return func(props, cache);\n            }\n        };\n    };\n}\nvar ThemeContext = /* #__PURE__ */ /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nif (true) {\n    ThemeContext.displayName = \"EmotionThemeContext\";\n}\nvar typePropName = \"__EMOTION_TYPE_PLEASE_DO_NOT_USE__\";\nvar labelPropName = \"__EMOTION_LABEL_PLEASE_DO_NOT_USE__\";\nvar Insertion$1 = function Insertion(_ref) {\n    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;\n    registerStyles$1(cache, serialized, isStringTag);\n    var rules = useInsertionEffectAlwaysWithSyncFallback(function() {\n        return insertStyles$1(cache, serialized, isStringTag);\n    });\n    if (!isBrowser$2 && rules !== undefined) {\n        var _ref2;\n        var serializedNames = serialized.name;\n        var next = serialized.next;\n        while(next !== undefined){\n            serializedNames += \" \" + next.name;\n            next = next.next;\n        }\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"style\", (_ref2 = {}, _ref2[\"data-emotion\"] = cache.key + \" \" + serializedNames, _ref2.dangerouslySetInnerHTML = {\n            __html: rules\n        }, _ref2.nonce = cache.sheet.nonce, _ref2));\n    }\n    return null;\n};\nvar Emotion = /* #__PURE__ */ withEmotionCache(function(props, cache, ref) {\n    var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works\n    // not passing the registered cache to serializeStyles because it would\n    // make certain babel optimisations not possible\n    if (typeof cssProp === \"string\" && cache.registered[cssProp] !== undefined) {\n        cssProp = cache.registered[cssProp];\n    }\n    var WrappedComponent = props[typePropName];\n    var registeredStyles = [\n        cssProp\n    ];\n    var className = \"\";\n    if (typeof props.className === \"string\") {\n        className = getRegisteredStyles$1(cache.registered, registeredStyles, props.className);\n    } else if (props.className != null) {\n        className = props.className + \" \";\n    }\n    var serialized = serializeStyles$1(registeredStyles, undefined, (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThemeContext));\n    if ( true && serialized.name.indexOf(\"-\") === -1) {\n        var labelFromStack = props[labelPropName];\n        if (labelFromStack) {\n            serialized = serializeStyles$1([\n                serialized,\n                \"label:\" + labelFromStack + \";\"\n            ]);\n        }\n    }\n    className += cache.key + \"-\" + serialized.name;\n    var newProps = {};\n    for(var key in props){\n        if (hasOwnProperty.call(props, key) && key !== \"css\" && key !== typePropName && ( false || key !== labelPropName)) {\n            newProps[key] = props[key];\n        }\n    }\n    newProps.ref = ref;\n    newProps.className = className;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Insertion$1, {\n        cache: cache,\n        serialized: serialized,\n        isStringTag: typeof WrappedComponent === \"string\"\n    }), /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(WrappedComponent, newProps));\n});\nif (true) {\n    Emotion.displayName = \"EmotionCssPropInternal\";\n}\nvar isBrowser$1 = typeof document !== \"undefined\";\nfunction getRegisteredStyles(registered, registeredStyles, classNames) {\n    var rawClassName = \"\";\n    classNames.split(\" \").forEach(function(className) {\n        if (registered[className] !== undefined) {\n            registeredStyles.push(registered[className] + \";\");\n        } else {\n            rawClassName += className + \" \";\n        }\n    });\n    return rawClassName;\n}\nvar registerStyles = function registerStyles(cache, serialized, isStringTag) {\n    var className = cache.key + \"-\" + serialized.name;\n    if (// class name could be used further down\n    // the tree but if it's a string tag, we know it won't\n    // so we don't have to add it to registered cache.\n    // this improves memory usage since we can avoid storing the whole style string\n    (isStringTag === false || // we need to always store it if we're in compat mode and\n    // in node since emotion-server relies on whether a style is in\n    // the registered cache to know whether a style is global or not\n    // also, note that this check will be dead code eliminated in the browser\n    isBrowser$1 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {\n        cache.registered[className] = serialized.styles;\n    }\n};\nvar insertStyles = function insertStyles(cache, serialized, isStringTag) {\n    registerStyles(cache, serialized, isStringTag);\n    var className = cache.key + \"-\" + serialized.name;\n    if (cache.inserted[serialized.name] === undefined) {\n        var stylesForSSR = \"\";\n        var current = serialized;\n        do {\n            var maybeStyles = cache.insert(serialized === current ? \".\" + className : \"\", current, cache.sheet, true);\n            if (!isBrowser$1 && maybeStyles !== undefined) {\n                stylesForSSR += maybeStyles;\n            }\n            current = current.next;\n        }while (current !== undefined);\n        if (!isBrowser$1 && stylesForSSR.length !== 0) {\n            return stylesForSSR;\n        }\n    }\n};\n/* eslint-disable */ // Inspired by https://github.com/garycourt/murmurhash-js\n// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86\nfunction murmur2(str) {\n    // 'm' and 'r' are mixing constants generated offline.\n    // They're not really 'magic', they just happen to work well.\n    // const m = 0x5bd1e995;\n    // const r = 24;\n    // Initialize the hash\n    var h = 0; // Mix 4 bytes at a time into the hash\n    var k, i = 0, len = str.length;\n    for(; len >= 4; ++i, len -= 4){\n        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n        k = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);\n        k ^= /* k >>> r: */ k >>> 24;\n        h = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^ /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n    } // Handle the last few bytes of the input array\n    switch(len){\n        case 3:\n            h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n            h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n            h ^= str.charCodeAt(i) & 0xff;\n            h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n    } // Do a few final mixes of the hash to ensure the last few\n    // bytes are well-incorporated.\n    h ^= h >>> 13;\n    h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n    return ((h ^ h >>> 15) >>> 0).toString(36);\n}\nvar unitlessKeys = {\n    animationIterationCount: 1,\n    borderImageOutset: 1,\n    borderImageSlice: 1,\n    borderImageWidth: 1,\n    boxFlex: 1,\n    boxFlexGroup: 1,\n    boxOrdinalGroup: 1,\n    columnCount: 1,\n    columns: 1,\n    flex: 1,\n    flexGrow: 1,\n    flexPositive: 1,\n    flexShrink: 1,\n    flexNegative: 1,\n    flexOrder: 1,\n    gridRow: 1,\n    gridRowEnd: 1,\n    gridRowSpan: 1,\n    gridRowStart: 1,\n    gridColumn: 1,\n    gridColumnEnd: 1,\n    gridColumnSpan: 1,\n    gridColumnStart: 1,\n    msGridRow: 1,\n    msGridRowSpan: 1,\n    msGridColumn: 1,\n    msGridColumnSpan: 1,\n    fontWeight: 1,\n    lineHeight: 1,\n    opacity: 1,\n    order: 1,\n    orphans: 1,\n    tabSize: 1,\n    widows: 1,\n    zIndex: 1,\n    zoom: 1,\n    WebkitLineClamp: 1,\n    // SVG-related properties\n    fillOpacity: 1,\n    floodOpacity: 1,\n    stopOpacity: 1,\n    strokeDasharray: 1,\n    strokeDashoffset: 1,\n    strokeMiterlimit: 1,\n    strokeOpacity: 1,\n    strokeWidth: 1\n};\nvar ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = \"You have illegal escape sequence in your template literal, most likely inside content's property value.\\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \\\"content: '\\\\00d7';\\\" should become \\\"content: '\\\\\\\\00d7';\\\".\\nYou can read more about this here:\\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\";\nvar UNDEFINED_AS_OBJECT_KEY_ERROR = \"You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).\";\nvar hyphenateRegex = /[A-Z]|^ms/g;\nvar animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;\nvar isCustomProperty = function isCustomProperty(property) {\n    return property.charCodeAt(1) === 45;\n};\nvar isProcessableValue = function isProcessableValue(value) {\n    return value != null && typeof value !== \"boolean\";\n};\nvar processStyleName = /* #__PURE__ */ memoize(function(styleName) {\n    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, \"-$&\").toLowerCase();\n});\nvar processStyleValue = function processStyleValue(key, value) {\n    switch(key){\n        case \"animation\":\n        case \"animationName\":\n            {\n                if (typeof value === \"string\") {\n                    return value.replace(animationRegex, function(match, p1, p2) {\n                        cursor = {\n                            name: p1,\n                            styles: p2,\n                            next: cursor\n                        };\n                        return p1;\n                    });\n                }\n            }\n    }\n    if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === \"number\" && value !== 0) {\n        return value + \"px\";\n    }\n    return value;\n};\nif (true) {\n    var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\\(|(no-)?(open|close)-quote/;\n    var contentValues = [\n        \"normal\",\n        \"none\",\n        \"initial\",\n        \"inherit\",\n        \"unset\"\n    ];\n    var oldProcessStyleValue = processStyleValue;\n    var msPattern = /^-ms-/;\n    var hyphenPattern = /-(.)/g;\n    var hyphenatedCache = {};\n    processStyleValue = function processStyleValue(key, value) {\n        if (key === \"content\") {\n            if (typeof value !== \"string\" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '\"' && value.charAt(0) !== \"'\")) {\n                throw new Error(\"You seem to be using a value for 'content' without quotes, try replacing it with `content: '\\\"\" + value + \"\\\"'`\");\n            }\n        }\n        var processed = oldProcessStyleValue(key, value);\n        if (processed !== \"\" && !isCustomProperty(key) && key.indexOf(\"-\") !== -1 && hyphenatedCache[key] === undefined) {\n            hyphenatedCache[key] = true;\n            console.error(\"Using kebab-case for css properties in objects is not supported. Did you mean \" + key.replace(msPattern, \"ms-\").replace(hyphenPattern, function(str, _char) {\n                return _char.toUpperCase();\n            }) + \"?\");\n        }\n        return processed;\n    };\n}\nvar noComponentSelectorMessage = \"Component selectors can only be used in conjunction with \" + \"@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware \" + \"compiler transform.\";\nfunction handleInterpolation(mergedProps, registered, interpolation) {\n    if (interpolation == null) {\n        return \"\";\n    }\n    if (interpolation.__emotion_styles !== undefined) {\n        if ( true && interpolation.toString() === \"NO_COMPONENT_SELECTOR\") {\n            throw new Error(noComponentSelectorMessage);\n        }\n        return interpolation;\n    }\n    switch(typeof interpolation){\n        case \"boolean\":\n            {\n                return \"\";\n            }\n        case \"object\":\n            {\n                if (interpolation.anim === 1) {\n                    cursor = {\n                        name: interpolation.name,\n                        styles: interpolation.styles,\n                        next: cursor\n                    };\n                    return interpolation.name;\n                }\n                if (interpolation.styles !== undefined) {\n                    var next = interpolation.next;\n                    if (next !== undefined) {\n                        // not the most efficient thing ever but this is a pretty rare case\n                        // and there will be very few iterations of this generally\n                        while(next !== undefined){\n                            cursor = {\n                                name: next.name,\n                                styles: next.styles,\n                                next: cursor\n                            };\n                            next = next.next;\n                        }\n                    }\n                    var styles = interpolation.styles + \";\";\n                    if ( true && interpolation.map !== undefined) {\n                        styles += interpolation.map;\n                    }\n                    return styles;\n                }\n                return createStringFromObject(mergedProps, registered, interpolation);\n            }\n        case \"function\":\n            {\n                if (mergedProps !== undefined) {\n                    var previousCursor = cursor;\n                    var result = interpolation(mergedProps);\n                    cursor = previousCursor;\n                    return handleInterpolation(mergedProps, registered, result);\n                } else if (true) {\n                    console.error(\"Functions that are interpolated in css calls will be stringified.\\n\" + \"If you want to have a css call based on props, create a function that returns a css call like this\\n\" + \"let dynamicStyle = (props) => css`color: ${props.color}`\\n\" + \"It can be called directly with props or interpolated in a styled call like this\\n\" + \"let SomeComponent = styled('div')`${dynamicStyle}`\");\n                }\n                break;\n            }\n        case \"string\":\n            if (true) {\n                var matched = [];\n                var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {\n                    var fakeVarName = \"animation\" + matched.length;\n                    matched.push(\"const \" + fakeVarName + \" = keyframes`\" + p2.replace(/^@keyframes animation-\\w+/, \"\") + \"`\");\n                    return \"${\" + fakeVarName + \"}\";\n                });\n                if (matched.length) {\n                    console.error(\"`keyframes` output got interpolated into plain string, please wrap it with `css`.\\n\\n\" + \"Instead of doing this:\\n\\n\" + [].concat(matched, [\n                        \"`\" + replaced + \"`\"\n                    ]).join(\"\\n\") + \"\\n\\nYou should wrap it with `css` like this:\\n\\n\" + (\"css`\" + replaced + \"`\"));\n                }\n            }\n            break;\n    } // finalize string values (regular strings and functions interpolated into css calls)\n    if (registered == null) {\n        return interpolation;\n    }\n    var cached = registered[interpolation];\n    return cached !== undefined ? cached : interpolation;\n}\nfunction createStringFromObject(mergedProps, registered, obj) {\n    var string = \"\";\n    if (Array.isArray(obj)) {\n        for(var i = 0; i < obj.length; i++){\n            string += handleInterpolation(mergedProps, registered, obj[i]) + \";\";\n        }\n    } else {\n        for(var _key in obj){\n            var value = obj[_key];\n            if (typeof value !== \"object\") {\n                if (registered != null && registered[value] !== undefined) {\n                    string += _key + \"{\" + registered[value] + \"}\";\n                } else if (isProcessableValue(value)) {\n                    string += processStyleName(_key) + \":\" + processStyleValue(_key, value) + \";\";\n                }\n            } else {\n                if (_key === \"NO_COMPONENT_SELECTOR\" && \"development\" !== \"production\") {\n                    throw new Error(noComponentSelectorMessage);\n                }\n                if (Array.isArray(value) && typeof value[0] === \"string\" && (registered == null || registered[value[0]] === undefined)) {\n                    for(var _i = 0; _i < value.length; _i++){\n                        if (isProcessableValue(value[_i])) {\n                            string += processStyleName(_key) + \":\" + processStyleValue(_key, value[_i]) + \";\";\n                        }\n                    }\n                } else {\n                    var interpolated = handleInterpolation(mergedProps, registered, value);\n                    switch(_key){\n                        case \"animation\":\n                        case \"animationName\":\n                            {\n                                string += processStyleName(_key) + \":\" + interpolated + \";\";\n                                break;\n                            }\n                        default:\n                            {\n                                if ( true && _key === \"undefined\") {\n                                    console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);\n                                }\n                                string += _key + \"{\" + interpolated + \"}\";\n                            }\n                    }\n                }\n            }\n        }\n    }\n    return string;\n}\nvar labelPattern = /label:\\s*([^\\s;\\n{]+)\\s*(;|$)/g;\nvar sourceMapPattern;\nif (true) {\n    sourceMapPattern = /\\/\\*#\\ssourceMappingURL=data:application\\/json;\\S+\\s+\\*\\//g;\n} // this is the cursor for keyframes\n// keyframes are stored on the SerializedStyles object as a linked list\nvar cursor;\nvar serializeStyles = function serializeStyles(args, registered, mergedProps) {\n    if (args.length === 1 && typeof args[0] === \"object\" && args[0] !== null && args[0].styles !== undefined) {\n        return args[0];\n    }\n    var stringMode = true;\n    var styles = \"\";\n    cursor = undefined;\n    var strings = args[0];\n    if (strings == null || strings.raw === undefined) {\n        stringMode = false;\n        styles += handleInterpolation(mergedProps, registered, strings);\n    } else {\n        if ( true && strings[0] === undefined) {\n            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);\n        }\n        styles += strings[0];\n    } // we start at 1 since we've already handled the first arg\n    for(var i = 1; i < args.length; i++){\n        styles += handleInterpolation(mergedProps, registered, args[i]);\n        if (stringMode) {\n            if ( true && strings[i] === undefined) {\n                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);\n            }\n            styles += strings[i];\n        }\n    }\n    var sourceMap;\n    if (true) {\n        styles = styles.replace(sourceMapPattern, function(match) {\n            sourceMap = match;\n            return \"\";\n        });\n    } // using a global regex with .exec is stateful so lastIndex has to be reset each time\n    labelPattern.lastIndex = 0;\n    var identifierName = \"\";\n    var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5\n    while((match = labelPattern.exec(styles)) !== null){\n        identifierName += \"-\" + // $FlowFixMe we know it's not null\n        match[1];\n    }\n    var name = murmur2(styles) + identifierName;\n    if (true) {\n        // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)\n        return {\n            name: name,\n            styles: styles,\n            map: sourceMap,\n            next: cursor,\n            toString: function toString() {\n                return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n            }\n        };\n    }\n    return {\n        name: name,\n        styles: styles,\n        next: cursor\n    };\n};\nvar testOmitPropsOnStringTag = isPropValid;\nvar testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {\n    return key !== \"theme\";\n};\nvar getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {\n    return typeof tag === \"string\" && // 96 is one less than the char code\n    // for \"a\" so this is checking that\n    // it's a lowercase character\n    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;\n};\nvar composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {\n    var shouldForwardProp;\n    if (options) {\n        var optionsShouldForwardProp = options.shouldForwardProp;\n        shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {\n            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);\n        } : optionsShouldForwardProp;\n    }\n    if (typeof shouldForwardProp !== \"function\" && isReal) {\n        shouldForwardProp = tag.__emotion_forwardProp;\n    }\n    return shouldForwardProp;\n};\nvar ILLEGAL_ESCAPE_SEQUENCE_ERROR = \"You have illegal escape sequence in your template literal, most likely inside content's property value.\\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \\\"content: '\\\\00d7';\\\" should become \\\"content: '\\\\\\\\00d7';\\\".\\nYou can read more about this here:\\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\";\nvar isBrowser = typeof document !== \"undefined\";\nvar Insertion = function Insertion(_ref) {\n    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;\n    registerStyles(cache, serialized, isStringTag);\n    var rules = useInsertionEffectAlwaysWithSyncFallback(function() {\n        return insertStyles(cache, serialized, isStringTag);\n    });\n    if (!isBrowser && rules !== undefined) {\n        var _ref2;\n        var serializedNames = serialized.name;\n        var next = serialized.next;\n        while(next !== undefined){\n            serializedNames += \" \" + next.name;\n            next = next.next;\n        }\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"style\", (_ref2 = {}, _ref2[\"data-emotion\"] = cache.key + \" \" + serializedNames, _ref2.dangerouslySetInnerHTML = {\n            __html: rules\n        }, _ref2.nonce = cache.sheet.nonce, _ref2));\n    }\n    return null;\n};\nvar createStyled = function createStyled(tag, options) {\n    if (true) {\n        if (tag === undefined) {\n            throw new Error(\"You are trying to create a styled element with an undefined component.\\nYou may have forgotten to import it.\");\n        }\n    }\n    var isReal = tag.__emotion_real === tag;\n    var baseTag = isReal && tag.__emotion_base || tag;\n    var identifierName;\n    var targetClassName;\n    if (options !== undefined) {\n        identifierName = options.label;\n        targetClassName = options.target;\n    }\n    var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);\n    var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);\n    var shouldUseAs = !defaultShouldForwardProp(\"as\");\n    return function() {\n        var args = arguments;\n        var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];\n        if (identifierName !== undefined) {\n            styles.push(\"label:\" + identifierName + \";\");\n        }\n        if (args[0] == null || args[0].raw === undefined) {\n            styles.push.apply(styles, args);\n        } else {\n            if ( true && args[0][0] === undefined) {\n                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n            }\n            styles.push(args[0][0]);\n            var len = args.length;\n            var i = 1;\n            for(; i < len; i++){\n                if ( true && args[0][i] === undefined) {\n                    console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n                }\n                styles.push(args[i], args[0][i]);\n            }\n        } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class\n        var Styled = withEmotionCache(function(props, cache, ref) {\n            var FinalTag = shouldUseAs && props.as || baseTag;\n            var className = \"\";\n            var classInterpolations = [];\n            var mergedProps = props;\n            if (props.theme == null) {\n                mergedProps = {};\n                for(var key in props){\n                    mergedProps[key] = props[key];\n                }\n                mergedProps.theme = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThemeContext);\n            }\n            if (typeof props.className === \"string\") {\n                className = getRegisteredStyles(cache.registered, classInterpolations, props.className);\n            } else if (props.className != null) {\n                className = props.className + \" \";\n            }\n            var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);\n            className += cache.key + \"-\" + serialized.name;\n            if (targetClassName !== undefined) {\n                className += \" \" + targetClassName;\n            }\n            var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;\n            var newProps = {};\n            for(var _key in props){\n                if (shouldUseAs && _key === \"as\") continue;\n                if (finalShouldForwardProp(_key)) {\n                    newProps[_key] = props[_key];\n                }\n            }\n            newProps.className = className;\n            newProps.ref = ref;\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Insertion, {\n                cache: cache,\n                serialized: serialized,\n                isStringTag: typeof FinalTag === \"string\"\n            }), /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(FinalTag, newProps));\n        });\n        Styled.displayName = identifierName !== undefined ? identifierName : \"Styled(\" + (typeof baseTag === \"string\" ? baseTag : baseTag.displayName || baseTag.name || \"Component\") + \")\";\n        Styled.defaultProps = tag.defaultProps;\n        Styled.__emotion_real = Styled;\n        Styled.__emotion_base = baseTag;\n        Styled.__emotion_styles = styles;\n        Styled.__emotion_forwardProp = shouldForwardProp;\n        Object.defineProperty(Styled, \"toString\", {\n            value: function value() {\n                if (targetClassName === undefined && \"development\" !== \"production\") {\n                    return \"NO_COMPONENT_SELECTOR\";\n                } // $FlowFixMe: coerce undefined to string\n                return \".\" + targetClassName;\n            }\n        });\n        Styled.withComponent = function(nextTag, nextOptions) {\n            return createStyled(nextTag, _extends({}, options, nextOptions, {\n                shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)\n            })).apply(void 0, styles);\n        };\n        return Styled;\n    };\n};\nvar tags = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"area\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"base\",\n    \"bdi\",\n    \"bdo\",\n    \"big\",\n    \"blockquote\",\n    \"body\",\n    \"br\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"col\",\n    \"colgroup\",\n    \"data\",\n    \"datalist\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"dialog\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"keygen\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"map\",\n    \"mark\",\n    \"marquee\",\n    \"menu\",\n    \"menuitem\",\n    \"meta\",\n    \"meter\",\n    \"nav\",\n    \"noscript\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"output\",\n    \"p\",\n    \"param\",\n    \"picture\",\n    \"pre\",\n    \"progress\",\n    \"q\",\n    \"rp\",\n    \"rt\",\n    \"ruby\",\n    \"s\",\n    \"samp\",\n    \"script\",\n    \"section\",\n    \"select\",\n    \"small\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"style\",\n    \"sub\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"u\",\n    \"ul\",\n    \"var\",\n    \"video\",\n    \"wbr\",\n    \"circle\",\n    \"clipPath\",\n    \"defs\",\n    \"ellipse\",\n    \"foreignObject\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"mask\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"stop\",\n    \"svg\",\n    \"text\",\n    \"tspan\"\n];\nvar newStyled = createStyled.bind();\ntags.forEach(function(tagName) {\n    // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type\n    newStyled[tagName] = newStyled(tagName);\n});\nvar classnames$1 = {\n    exports: {}\n};\n/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/ (function(module) {\n    /* global define */ (function() {\n        var hasOwn = {}.hasOwnProperty;\n        function classNames() {\n            var classes = [];\n            for(var i = 0; i < arguments.length; i++){\n                var arg = arguments[i];\n                if (!arg) continue;\n                var argType = typeof arg;\n                if (argType === \"string\" || argType === \"number\") {\n                    classes.push(arg);\n                } else if (Array.isArray(arg)) {\n                    if (arg.length) {\n                        var inner = classNames.apply(null, arg);\n                        if (inner) {\n                            classes.push(inner);\n                        }\n                    }\n                } else if (argType === \"object\") {\n                    if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes(\"[native code]\")) {\n                        classes.push(arg.toString());\n                        continue;\n                    }\n                    for(var key in arg){\n                        if (hasOwn.call(arg, key) && arg[key]) {\n                            classes.push(key);\n                        }\n                    }\n                }\n            }\n            return classes.join(\" \");\n        }\n        if (module.exports) {\n            classNames.default = classNames;\n            module.exports = classNames;\n        } else {\n            window.classNames = classNames;\n        }\n    })();\n})(classnames$1);\nvar classnames = classnames$1.exports;\nvar LegacySidebarContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(undefined);\nvar SidebarProvider = function(_a) {\n    var children = _a.children;\n    var _b = react__WEBPACK_IMPORTED_MODULE_0___default().useState({\n        collapsed: false,\n        toggled: false,\n        broken: false,\n        rtl: false,\n        transitionDuration: 300\n    }), sidebarState = _b[0], setSidebarState = _b[1];\n    var updateSidebarState = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function(values) {\n        setSidebarState(function(prevState) {\n            return __assign(__assign({}, prevState), values);\n        });\n    }, []);\n    var updateCollapseState = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function() {\n        setSidebarState(function(prevState) {\n            return __assign(__assign({}, prevState), {\n                collapsed: !Boolean(prevState === null || prevState === void 0 ? void 0 : prevState.collapsed)\n            });\n        });\n    }, []);\n    var updateToggleState = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function() {\n        setSidebarState(function(prevState) {\n            return __assign(__assign({}, prevState), {\n                toggled: !Boolean(prevState === null || prevState === void 0 ? void 0 : prevState.toggled)\n            });\n        });\n    }, []);\n    var providerValue = react__WEBPACK_IMPORTED_MODULE_0___default().useMemo(function() {\n        return __assign(__assign({}, sidebarState), {\n            updateSidebarState: updateSidebarState,\n            updateCollapseState: updateCollapseState,\n            updateToggleState: updateToggleState\n        });\n    }, [\n        sidebarState,\n        updateCollapseState,\n        updateSidebarState,\n        updateToggleState\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LegacySidebarContext.Provider, {\n        value: providerValue\n    }, children);\n};\nvar useLegacySidebar = function() {\n    var context = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(LegacySidebarContext);\n    return context;\n};\nvar useMediaQuery = function(breakpoint) {\n    var _a = react__WEBPACK_IMPORTED_MODULE_0___default().useState(!!breakpoint && \"undefined\" !== \"undefined\" && 0), matches = _a[0], setMatches = _a[1];\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        if (breakpoint) {\n            var media_1 = window.matchMedia(breakpoint);\n            var handleMatch_1 = function() {\n                if (media_1.matches !== matches) {\n                    setMatches(media_1.matches);\n                }\n            };\n            handleMatch_1();\n            media_1.addEventListener(\"change\", handleMatch_1);\n            return function() {\n                return media_1.removeEventListener(\"change\", handleMatch_1);\n            };\n        }\n    }, [\n        matches,\n        breakpoint\n    ]);\n    return matches;\n};\nvar sidebarClasses = {\n    root: \"ps-sidebar-root\",\n    container: \"ps-sidebar-container\",\n    image: \"ps-sidebar-image\",\n    backdrop: \"ps-sidebar-backdrop\",\n    collapsed: \"ps-collapsed\",\n    toggled: \"ps-toggled\",\n    rtl: \"ps-rtl\",\n    broken: \"ps-broken\"\n};\nvar menuClasses = {\n    root: \"ps-menu-root\",\n    menuItemRoot: \"ps-menuitem-root\",\n    subMenuRoot: \"ps-submenu-root\",\n    button: \"ps-menu-button\",\n    prefix: \"ps-menu-prefix\",\n    suffix: \"ps-menu-suffix\",\n    label: \"ps-menu-label\",\n    icon: \"ps-menu-icon\",\n    subMenuContent: \"ps-submenu-content\",\n    SubMenuExpandIcon: \"ps-submenu-expand-icon\",\n    disabled: \"ps-disabled\",\n    active: \"ps-active\",\n    open: \"ps-open\"\n};\nvar StyledBackdrop = newStyled.div(templateObject_1$b || (templateObject_1$b = __makeTemplateObject([\n    \"\\n  position: fixed;\\n  top: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  left: 0px;\\n  z-index: 1;\\n  background-color: rgb(0, 0, 0, 0.3);\\n\"\n], [\n    \"\\n  position: fixed;\\n  top: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  left: 0px;\\n  z-index: 1;\\n  background-color: rgb(0, 0, 0, 0.3);\\n\"\n])));\nvar templateObject_1$b;\nvar BREAK_POINTS = {\n    xs: \"480px\",\n    sm: \"576px\",\n    md: \"768px\",\n    lg: \"992px\",\n    xl: \"1200px\",\n    xxl: \"1600px\",\n    always: \"always\",\n    all: \"all\"\n};\nvar StyledSidebar = newStyled.aside(templateObject_1$a || (templateObject_1$a = __makeTemplateObject([\n    \"\\n  position: relative;\\n  border-right-width: 1px;\\n  border-right-style: solid;\\n  border-color: #efefef;\\n\\n  transition: \",\n    \";\\n\\n  width: \",\n    \";\\n  min-width: \",\n    \";\\n\\n  &.\",\n    \" {\\n    width: \",\n    \";\\n    min-width: \",\n    \";\\n  }\\n\\n  &.\",\n    \" {\\n    direction: rtl;\\n    border-right-width: none;\\n    border-left-width: 1px;\\n    border-right-style: none;\\n    border-left-style: solid;\\n  }\\n\\n  &.\",\n    \" {\\n    position: fixed;\\n    height: 100%;\\n    top: 0px;\\n    z-index: 100;\\n\\n    \",\n    \"\\n\\n    &.\",\n    \" {\\n      \",\n    \"\\n    }\\n\\n    &.\",\n    \" {\\n      \",\n    \"\\n    }\\n\\n    &.\",\n    \" {\\n      right: -\",\n    \";\\n\\n      &.\",\n    \" {\\n        right: -\",\n    \";\\n      }\\n\\n      &.\",\n    \" {\\n        right: 0;\\n      }\\n    }\\n  }\\n\\n  \",\n    \"\\n\"\n], [\n    \"\\n  position: relative;\\n  border-right-width: 1px;\\n  border-right-style: solid;\\n  border-color: #efefef;\\n\\n  transition: \",\n    \";\\n\\n  width: \",\n    \";\\n  min-width: \",\n    \";\\n\\n  &.\",\n    \" {\\n    width: \",\n    \";\\n    min-width: \",\n    \";\\n  }\\n\\n  &.\",\n    \" {\\n    direction: rtl;\\n    border-right-width: none;\\n    border-left-width: 1px;\\n    border-right-style: none;\\n    border-left-style: solid;\\n  }\\n\\n  &.\",\n    \" {\\n    position: fixed;\\n    height: 100%;\\n    top: 0px;\\n    z-index: 100;\\n\\n    \",\n    \"\\n\\n    &.\",\n    \" {\\n      \",\n    \"\\n    }\\n\\n    &.\",\n    \" {\\n      \",\n    \"\\n    }\\n\\n    &.\",\n    \" {\\n      right: -\",\n    \";\\n\\n      &.\",\n    \" {\\n        right: -\",\n    \";\\n      }\\n\\n      &.\",\n    \" {\\n        right: 0;\\n      }\\n    }\\n  }\\n\\n  \",\n    \"\\n\"\n])), function(_a) {\n    var transitionDuration = _a.transitionDuration;\n    return \"width, left, right, \".concat(transitionDuration, \"ms\");\n}, function(_a) {\n    var width = _a.width;\n    return width;\n}, function(_a) {\n    var width = _a.width;\n    return width;\n}, sidebarClasses.collapsed, function(_a) {\n    var collapsedWidth = _a.collapsedWidth;\n    return collapsedWidth;\n}, function(_a) {\n    var collapsedWidth = _a.collapsedWidth;\n    return collapsedWidth;\n}, sidebarClasses.rtl, sidebarClasses.broken, function(_a) {\n    var rtl = _a.rtl, width = _a.width;\n    return !rtl ? \"left: -\".concat(width, \";\") : \"\";\n}, sidebarClasses.collapsed, function(_a) {\n    var rtl = _a.rtl, collapsedWidth = _a.collapsedWidth;\n    return !rtl ? \"left: -\".concat(collapsedWidth, \"; \") : \"\";\n}, sidebarClasses.toggled, function(_a) {\n    var rtl = _a.rtl;\n    return !rtl ? \"left: 0;\" : \"\";\n}, sidebarClasses.rtl, function(_a) {\n    var width = _a.width;\n    return width;\n}, sidebarClasses.collapsed, function(_a) {\n    var collapsedWidth = _a.collapsedWidth;\n    return collapsedWidth;\n}, sidebarClasses.toggled, function(_a) {\n    var rootStyles = _a.rootStyles;\n    return rootStyles;\n});\nvar StyledSidebarContainer = newStyled.div(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([\n    \"\\n  position: relative;\\n  height: 100%;\\n  overflow-y: auto;\\n  overflow-x: hidden;\\n  z-index: 3;\\n\\n  \",\n    \"\\n\"\n], [\n    \"\\n  position: relative;\\n  height: 100%;\\n  overflow-y: auto;\\n  overflow-x: hidden;\\n  z-index: 3;\\n\\n  \",\n    \"\\n\"\n])), function(_a) {\n    var backgroundColor = _a.backgroundColor;\n    return backgroundColor ? \"background-color:\".concat(backgroundColor, \";\") : \"\";\n});\nvar StyledSidebarImage = newStyled.img(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject([\n    \"\\n  &.\",\n    \" {\\n    width: 100%;\\n    height: 100%;\\n    object-fit: cover;\\n    object-position: center;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n    z-index: 2;\\n  }\\n\"\n], [\n    \"\\n  &.\",\n    \" {\\n    width: 100%;\\n    height: 100%;\\n    object-fit: cover;\\n    object-position: center;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n    z-index: 2;\\n  }\\n\"\n])), sidebarClasses.image);\nvar SidebarContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext({\n    collapsed: false,\n    toggled: false,\n    rtl: false,\n    transitionDuration: 300\n});\nvar Sidebar = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(function(_a, ref) {\n    var _b;\n    var collapsed = _a.collapsed, toggled = _a.toggled, onBackdropClick = _a.onBackdropClick, onBreakPoint = _a.onBreakPoint, _c = _a.width, width = _c === void 0 ? \"250px\" : _c, _d = _a.collapsedWidth, collapsedWidth = _d === void 0 ? \"80px\" : _d, defaultCollapsed = _a.defaultCollapsed, className = _a.className, children = _a.children, breakPoint = _a.breakPoint, customBreakPoint = _a.customBreakPoint, _e = _a.backgroundColor, backgroundColor = _e === void 0 ? \"rgb(249, 249, 249, 0.7)\" : _e, _f = _a.transitionDuration, transitionDuration = _f === void 0 ? 300 : _f, image = _a.image, rtl = _a.rtl, rootStyles = _a.rootStyles, rest = __rest(_a, [\n        \"collapsed\",\n        \"toggled\",\n        \"onBackdropClick\",\n        \"onBreakPoint\",\n        \"width\",\n        \"collapsedWidth\",\n        \"defaultCollapsed\",\n        \"className\",\n        \"children\",\n        \"breakPoint\",\n        \"customBreakPoint\",\n        \"backgroundColor\",\n        \"transitionDuration\",\n        \"image\",\n        \"rtl\",\n        \"rootStyles\"\n    ]);\n    var getBreakpointValue = function() {\n        if (customBreakPoint) {\n            return \"(max-width: \".concat(customBreakPoint, \")\");\n        }\n        if (breakPoint) {\n            if ([\n                \"xs\",\n                \"sm\",\n                \"md\",\n                \"lg\",\n                \"xl\",\n                \"xxl\"\n            ].includes(breakPoint)) {\n                return \"(max-width: \".concat(BREAK_POINTS[breakPoint], \")\");\n            }\n            if (breakPoint === \"always\" || breakPoint === \"all\") {\n                if (breakPoint === \"always\") {\n                    console.warn('The \"always\" breakPoint is deprecated and will be removed in future release. ' + 'Please use the \"all\" breakPoint instead.');\n                }\n                return \"screen\";\n            }\n            return \"(max-width: \".concat(breakPoint, \")\");\n        }\n    };\n    var breakpointCallbackFnRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef();\n    breakpointCallbackFnRef.current = function(broken) {\n        onBreakPoint === null || onBreakPoint === void 0 ? void 0 : onBreakPoint(broken);\n    };\n    var broken = useMediaQuery(getBreakpointValue());\n    var _g = react__WEBPACK_IMPORTED_MODULE_0___default().useState(false), mounted = _g[0], setMounted = _g[1];\n    var legacySidebarContext = useLegacySidebar();\n    var collapsedValue = collapsed !== null && collapsed !== void 0 ? collapsed : !mounted && defaultCollapsed ? true : legacySidebarContext === null || legacySidebarContext === void 0 ? void 0 : legacySidebarContext.collapsed;\n    var toggledValue = toggled !== null && toggled !== void 0 ? toggled : legacySidebarContext === null || legacySidebarContext === void 0 ? void 0 : legacySidebarContext.toggled;\n    var handleBackdropClick = function() {\n        onBackdropClick === null || onBackdropClick === void 0 ? void 0 : onBackdropClick();\n        legacySidebarContext === null || legacySidebarContext === void 0 ? void 0 : legacySidebarContext.updateSidebarState({\n            toggled: false\n        });\n    };\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        var _a;\n        (_a = breakpointCallbackFnRef.current) === null || _a === void 0 ? void 0 : _a.call(breakpointCallbackFnRef, broken);\n    }, [\n        broken\n    ]);\n    // TODO: remove in next major version\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        legacySidebarContext === null || legacySidebarContext === void 0 ? void 0 : legacySidebarContext.updateSidebarState({\n            broken: broken,\n            rtl: rtl,\n            transitionDuration: transitionDuration\n        });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        broken,\n        legacySidebarContext === null || legacySidebarContext === void 0 ? void 0 : legacySidebarContext.updateSidebarState,\n        rtl,\n        transitionDuration\n    ]);\n    // TODO: remove in next major version\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        if (!mounted) {\n            legacySidebarContext === null || legacySidebarContext === void 0 ? void 0 : legacySidebarContext.updateSidebarState({\n                collapsed: defaultCollapsed\n            });\n            setMounted(true);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        defaultCollapsed,\n        mounted,\n        legacySidebarContext === null || legacySidebarContext === void 0 ? void 0 : legacySidebarContext.updateSidebarState\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SidebarContext.Provider, {\n        value: {\n            collapsed: collapsedValue,\n            toggled: toggledValue,\n            rtl: rtl,\n            transitionDuration: transitionDuration\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledSidebar, __assign({\n        ref: ref,\n        \"data-testid\": \"\".concat(sidebarClasses.root, \"-test-id\"),\n        rtl: rtl,\n        rootStyles: rootStyles,\n        width: width,\n        collapsedWidth: collapsedWidth,\n        transitionDuration: transitionDuration,\n        className: classnames(sidebarClasses.root, (_b = {}, _b[sidebarClasses.collapsed] = collapsedValue, _b[sidebarClasses.toggled] = toggledValue, _b[sidebarClasses.broken] = broken, _b[sidebarClasses.rtl] = rtl, _b), className)\n    }, rest), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledSidebarContainer, {\n        \"data-testid\": \"\".concat(sidebarClasses.container, \"-test-id\"),\n        className: sidebarClasses.container,\n        backgroundColor: backgroundColor\n    }, children), image && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledSidebarImage, {\n        \"data-testid\": \"\".concat(sidebarClasses.image, \"-test-id\"),\n        src: image,\n        alt: \"sidebar background\",\n        className: sidebarClasses.image\n    }), broken && toggledValue && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledBackdrop, {\n        \"data-testid\": \"\".concat(sidebarClasses.backdrop, \"-test-id\"),\n        role: \"button\",\n        tabIndex: 0,\n        \"aria-label\": \"backdrop\",\n        onClick: handleBackdropClick,\n        onKeyPress: handleBackdropClick,\n        className: sidebarClasses.backdrop\n    })));\n});\nvar templateObject_1$a, templateObject_2$1, templateObject_3$1;\nvar StyledUl = newStyled.ul(templateObject_1$9 || (templateObject_1$9 = __makeTemplateObject([\n    \"\\n  list-style-type: none;\\n  padding: 0;\\n  margin: 0;\\n\"\n], [\n    \"\\n  list-style-type: none;\\n  padding: 0;\\n  margin: 0;\\n\"\n])));\nvar templateObject_1$9;\nvar StyledMenu = newStyled.nav(templateObject_1$8 || (templateObject_1$8 = __makeTemplateObject([\n    \"\\n  &.\",\n    \" {\\n    \",\n    \"\\n  }\\n\"\n], [\n    \"\\n  &.\",\n    \" {\\n    \",\n    \"\\n  }\\n\"\n])), menuClasses.root, function(_a) {\n    var rootStyles = _a.rootStyles;\n    return rootStyles;\n});\nvar MenuContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(undefined);\nvar LevelContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(0);\nvar MenuFR = function(_a, ref) {\n    var children = _a.children, className = _a.className, _b = _a.transitionDuration, transitionDuration = _b === void 0 ? 300 : _b, _c = _a.closeOnClick, closeOnClick = _c === void 0 ? false : _c, rootStyles = _a.rootStyles, menuItemStyles = _a.menuItemStyles, renderExpandIcon = _a.renderExpandIcon, rest = __rest(_a, [\n        \"children\",\n        \"className\",\n        \"transitionDuration\",\n        \"closeOnClick\",\n        \"rootStyles\",\n        \"menuItemStyles\",\n        \"renderExpandIcon\"\n    ]);\n    var providerValue = react__WEBPACK_IMPORTED_MODULE_0___default().useMemo(function() {\n        return {\n            transitionDuration: transitionDuration,\n            closeOnClick: closeOnClick,\n            menuItemStyles: menuItemStyles,\n            renderExpandIcon: renderExpandIcon\n        };\n    }, [\n        transitionDuration,\n        closeOnClick,\n        menuItemStyles,\n        renderExpandIcon\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MenuContext.Provider, {\n        value: providerValue\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LevelContext.Provider, {\n        value: 0\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledMenu, __assign({\n        ref: ref,\n        className: classnames(menuClasses.root, className),\n        rootStyles: rootStyles\n    }, rest), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledUl, null, children))));\n};\nvar Menu = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(MenuFR);\nvar templateObject_1$8;\nvar useMenu = function() {\n    var context = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(MenuContext);\n    if (context === undefined) {\n        //TODO: set better error message\n        throw new Error(\"Menu Component is required!\");\n    }\n    return context;\n};\nvar StyledSubMenuContent = newStyled.div(templateObject_1$7 || (templateObject_1$7 = __makeTemplateObject([\n    \"\\n  height: 0px;\\n  overflow: hidden;\\n  z-index: 999;\\n  transition: height \",\n    \"ms;\\n  box-sizing: border-box;\\n  background-color: white;\\n\\n  \",\n    \"\\n\\n  \",\n    \"\\n\\n  \",\n    \";\\n\\n  \",\n    \";\\n\"\n], [\n    \"\\n  height: 0px;\\n  overflow: hidden;\\n  z-index: 999;\\n  transition: height \",\n    \"ms;\\n  box-sizing: border-box;\\n  background-color: white;\\n\\n  \",\n    \"\\n\\n  \",\n    \"\\n\\n  \",\n    \";\\n\\n  \",\n    \";\\n\"\n])), function(_a) {\n    var transitionDuration = _a.transitionDuration;\n    return transitionDuration;\n}, function(_a) {\n    var firstLevel = _a.firstLevel, collapsed = _a.collapsed;\n    return firstLevel && collapsed && \"\\n     background-color: white;\\n     box-shadow: 0 3px 6px -4px #0000001f, 0 6px 16px #00000014, 0 9px 28px 8px #0000000d;\\n     \";\n}, function(_a) {\n    var defaultOpen = _a.defaultOpen;\n    return defaultOpen && \"height: auto;display: block;\";\n}, function(_a) {\n    var collapsed = _a.collapsed, firstLevel = _a.firstLevel, openWhenCollapsed = _a.openWhenCollapsed;\n    return collapsed && firstLevel ? \"\\n      position: fixed;\\n      padding-left: 0px;\\n      width: 200px;\\n      border-radius: 4px;\\n      height: auto!important;\\n      display: block!important;     \\n      transition: none!important;     \\n      visibility: \".concat(openWhenCollapsed ? \"visible\" : \"hidden\", \";\\n     \") : \"\\n      position: static!important;\\n      transform: none!important;\\n      \";\n}, function(_a) {\n    var rootStyles = _a.rootStyles;\n    return rootStyles;\n});\nvar SubMenuContentFR = function(_a, ref) {\n    var children = _a.children, open = _a.open, openWhenCollapsed = _a.openWhenCollapsed, firstLevel = _a.firstLevel, collapsed = _a.collapsed, defaultOpen = _a.defaultOpen, rest = __rest(_a, [\n        \"children\",\n        \"open\",\n        \"openWhenCollapsed\",\n        \"firstLevel\",\n        \"collapsed\",\n        \"defaultOpen\"\n    ]);\n    var transitionDuration = useMenu().transitionDuration;\n    var defaultOpenState = react__WEBPACK_IMPORTED_MODULE_0___default().useState(defaultOpen)[0];\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledSubMenuContent, __assign({\n        \"data-testid\": \"\".concat(menuClasses.subMenuContent, \"-test-id\"),\n        ref: ref,\n        firstLevel: firstLevel,\n        collapsed: collapsed,\n        open: open,\n        openWhenCollapsed: openWhenCollapsed,\n        transitionDuration: transitionDuration,\n        defaultOpen: defaultOpenState\n    }, rest), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledUl, null, children));\n};\nvar SubMenuContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(SubMenuContentFR);\nvar templateObject_1$7;\nvar StyledMenuLabel = newStyled.span(templateObject_1$6 || (templateObject_1$6 = __makeTemplateObject([\n    \"\\n  flex-grow: 1;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n\\n  \",\n    \";\\n\"\n], [\n    \"\\n  flex-grow: 1;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n\\n  \",\n    \";\\n\"\n])), function(_a) {\n    var rootStyles = _a.rootStyles;\n    return rootStyles;\n});\nvar templateObject_1$6;\nvar StyledMenuIcon = newStyled.span(templateObject_1$5 || (templateObject_1$5 = __makeTemplateObject([\n    \"\\n  width: 35px;\\n  min-width: 35px;\\n  height: 35px;\\n  line-height: 35px;\\n  text-align: center;\\n  display: inline-block;\\n  border-radius: 2px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n\\n  \",\n    \"\\n\\n  \",\n    \";\\n\"\n], [\n    \"\\n  width: 35px;\\n  min-width: 35px;\\n  height: 35px;\\n  line-height: 35px;\\n  text-align: center;\\n  display: inline-block;\\n  border-radius: 2px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n\\n  \",\n    \"\\n\\n  \",\n    \";\\n\"\n])), function(_a) {\n    var rtl = _a.rtl;\n    return rtl ? \"margin-left: 10px;\" : \"margin-right: 10px;\";\n}, function(_a) {\n    var rootStyles = _a.rootStyles;\n    return rootStyles;\n});\nvar templateObject_1$5;\nvar StyledMenuPrefix = newStyled.span(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject([\n    \"\\n  \",\n    \"\\n  opacity: \",\n    \";\\n  transition: opacity \",\n    \"ms;\\n\\n  \",\n    \";\\n\"\n], [\n    \"\\n  \",\n    \"\\n  opacity: \",\n    \";\\n  transition: opacity \",\n    \"ms;\\n\\n  \",\n    \";\\n\"\n])), function(_a) {\n    var rtl = _a.rtl;\n    return rtl ? \"margin-left: 5px;\" : \"margin-right: 5px;\";\n}, function(_a) {\n    var firstLevel = _a.firstLevel, collapsed = _a.collapsed;\n    return firstLevel && collapsed ? \"0\" : \"1\";\n}, function(_a) {\n    var transitionDuration = _a.transitionDuration;\n    return transitionDuration;\n}, function(_a) {\n    var rootStyles = _a.rootStyles;\n    return rootStyles;\n});\nvar templateObject_1$4;\nvar StyledMenuSuffix = newStyled.span(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject([\n    \"\\n  margin-right: 5px;\\n  margin-left: 5px;\\n  opacity: \",\n    \";\\n  transition: opacity \",\n    \"ms;\\n\\n  \",\n    \";\\n\"\n], [\n    \"\\n  margin-right: 5px;\\n  margin-left: 5px;\\n  opacity: \",\n    \";\\n  transition: opacity \",\n    \"ms;\\n\\n  \",\n    \";\\n\"\n])), function(_a) {\n    var firstLevel = _a.firstLevel, collapsed = _a.collapsed;\n    return firstLevel && collapsed ? \"0\" : \"1\";\n}, function(_a) {\n    var transitionDuration = _a.transitionDuration;\n    return transitionDuration;\n}, function(_a) {\n    var rootStyles = _a.rootStyles;\n    return rootStyles;\n});\nvar templateObject_1$3;\nvar StyledExpandIconWrapper = newStyled.span(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([\n    \"\\n  \",\n    \"\\n\\n  \",\n    \";\\n\"\n], [\n    \"\\n  \",\n    \"\\n\\n  \",\n    \";\\n\"\n])), function(_a) {\n    var collapsed = _a.collapsed, level = _a.level, rtl = _a.rtl;\n    return collapsed && level === 0 && \"\\n    position: absolute;\\n    \".concat(rtl ? \"left: 10px;\" : \"right: 10px;\", \"\\n    top: 50%;\\n    transform: translateY(-50%);\\n    \\n    \");\n}, function(_a) {\n    var rootStyles = _a.rootStyles;\n    return rootStyles;\n});\nvar StyledExpandIcon = newStyled.span(templateObject_2 || (templateObject_2 = __makeTemplateObject([\n    \"\\n  display: inline-block;\\n  transition: transform 0.3s;\\n  \",\n    \"\\n\\n  width: 5px;\\n  height: 5px;\\n  transform: rotate(\",\n    \");\\n\"\n], [\n    \"\\n  display: inline-block;\\n  transition: transform 0.3s;\\n  \",\n    \"\\n\\n  width: 5px;\\n  height: 5px;\\n  transform: rotate(\",\n    \");\\n\"\n])), function(_a) {\n    var rtl = _a.rtl;\n    return rtl ? \"\\n          border-left: 2px solid currentcolor;\\n          border-top: 2px solid currentcolor;\\n        \" : \" border-right: 2px solid currentcolor;\\n          border-bottom: 2px solid currentcolor;\\n        \";\n}, function(_a) {\n    var open = _a.open, rtl = _a.rtl;\n    return open ? rtl ? \"-135deg\" : \"45deg\" : \"-45deg\";\n});\nvar StyledExpandIconCollapsed = newStyled.span(templateObject_3 || (templateObject_3 = __makeTemplateObject([\n    \"\\n  width: 5px;\\n  height: 5px;\\n  background-color: currentcolor;\\n  border-radius: 50%;\\n  display: inline-block;\\n\"\n], [\n    \"\\n  width: 5px;\\n  height: 5px;\\n  background-color: currentcolor;\\n  border-radius: 50%;\\n  display: inline-block;\\n\"\n])));\nvar templateObject_1$2, templateObject_2, templateObject_3;\nvar top = \"top\";\nvar bottom = \"bottom\";\nvar right = \"right\";\nvar left = \"left\";\nvar auto = \"auto\";\nvar basePlacements = [\n    top,\n    bottom,\n    right,\n    left\n];\nvar start = \"start\";\nvar end = \"end\";\nvar clippingParents = \"clippingParents\";\nvar viewport = \"viewport\";\nvar popper = \"popper\";\nvar reference = \"reference\";\nvar variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {\n    return acc.concat([\n        placement + \"-\" + start,\n        placement + \"-\" + end\n    ]);\n}, []);\nvar placements = /*#__PURE__*/ [].concat(basePlacements, [\n    auto\n]).reduce(function(acc, placement) {\n    return acc.concat([\n        placement,\n        placement + \"-\" + start,\n        placement + \"-\" + end\n    ]);\n}, []); // modifiers that need to read the DOM\nvar beforeRead = \"beforeRead\";\nvar read = \"read\";\nvar afterRead = \"afterRead\"; // pure-logic modifiers\nvar beforeMain = \"beforeMain\";\nvar main = \"main\";\nvar afterMain = \"afterMain\"; // modifier with the purpose to write to the DOM (or write into a framework state)\nvar beforeWrite = \"beforeWrite\";\nvar write = \"write\";\nvar afterWrite = \"afterWrite\";\nvar modifierPhases = [\n    beforeRead,\n    read,\n    afterRead,\n    beforeMain,\n    main,\n    afterMain,\n    beforeWrite,\n    write,\n    afterWrite\n];\nfunction getNodeName(element) {\n    return element ? (element.nodeName || \"\").toLowerCase() : null;\n}\nfunction getWindow(node) {\n    if (node == null) {\n        return window;\n    }\n    if (node.toString() !== \"[object Window]\") {\n        var ownerDocument = node.ownerDocument;\n        return ownerDocument ? ownerDocument.defaultView || window : window;\n    }\n    return node;\n}\nfunction isElement(node) {\n    var OwnElement = getWindow(node).Element;\n    return node instanceof OwnElement || node instanceof Element;\n}\nfunction isHTMLElement(node) {\n    var OwnElement = getWindow(node).HTMLElement;\n    return node instanceof OwnElement || node instanceof HTMLElement;\n}\nfunction isShadowRoot(node) {\n    // IE 11 has no ShadowRoot\n    if (typeof ShadowRoot === \"undefined\") {\n        return false;\n    }\n    var OwnElement = getWindow(node).ShadowRoot;\n    return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n// and applies them to the HTMLElements such as popper and arrow\nfunction applyStyles(_ref) {\n    var state = _ref.state;\n    Object.keys(state.elements).forEach(function(name) {\n        var style = state.styles[name] || {};\n        var attributes = state.attributes[name] || {};\n        var element = state.elements[name]; // arrow is optional + virtual elements\n        if (!isHTMLElement(element) || !getNodeName(element)) {\n            return;\n        } // Flow doesn't support to extend this property, but it's the most\n        // effective way to apply styles to an HTMLElement\n        // $FlowFixMe[cannot-write]\n        Object.assign(element.style, style);\n        Object.keys(attributes).forEach(function(name) {\n            var value = attributes[name];\n            if (value === false) {\n                element.removeAttribute(name);\n            } else {\n                element.setAttribute(name, value === true ? \"\" : value);\n            }\n        });\n    });\n}\nfunction effect$2(_ref2) {\n    var state = _ref2.state;\n    var initialStyles = {\n        popper: {\n            position: state.options.strategy,\n            left: \"0\",\n            top: \"0\",\n            margin: \"0\"\n        },\n        arrow: {\n            position: \"absolute\"\n        },\n        reference: {}\n    };\n    Object.assign(state.elements.popper.style, initialStyles.popper);\n    state.styles = initialStyles;\n    if (state.elements.arrow) {\n        Object.assign(state.elements.arrow.style, initialStyles.arrow);\n    }\n    return function() {\n        Object.keys(state.elements).forEach(function(name) {\n            var element = state.elements[name];\n            var attributes = state.attributes[name] || {};\n            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n            var style = styleProperties.reduce(function(style, property) {\n                style[property] = \"\";\n                return style;\n            }, {}); // arrow is optional + virtual elements\n            if (!isHTMLElement(element) || !getNodeName(element)) {\n                return;\n            }\n            Object.assign(element.style, style);\n            Object.keys(attributes).forEach(function(attribute) {\n                element.removeAttribute(attribute);\n            });\n        });\n    };\n} // eslint-disable-next-line import/no-unused-modules\nvar applyStyles$1 = {\n    name: \"applyStyles\",\n    enabled: true,\n    phase: \"write\",\n    fn: applyStyles,\n    effect: effect$2,\n    requires: [\n        \"computeStyles\"\n    ]\n};\nfunction getBasePlacement(placement) {\n    return placement.split(\"-\")[0];\n}\nvar max = Math.max;\nvar min = Math.min;\nvar round = Math.round;\nfunction getUAString() {\n    var uaData = navigator.userAgentData;\n    if (uaData != null && uaData.brands) {\n        return uaData.brands.map(function(item) {\n            return item.brand + \"/\" + item.version;\n        }).join(\" \");\n    }\n    return navigator.userAgent;\n}\nfunction isLayoutViewport() {\n    return !/^((?!chrome|android).)*safari/i.test(getUAString());\n}\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy) {\n    if (includeScale === void 0) {\n        includeScale = false;\n    }\n    if (isFixedStrategy === void 0) {\n        isFixedStrategy = false;\n    }\n    var clientRect = element.getBoundingClientRect();\n    var scaleX = 1;\n    var scaleY = 1;\n    if (includeScale && isHTMLElement(element)) {\n        scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n        scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n    }\n    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;\n    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n    var width = clientRect.width / scaleX;\n    var height = clientRect.height / scaleY;\n    return {\n        width: width,\n        height: height,\n        top: y,\n        right: x + width,\n        bottom: y + height,\n        left: x,\n        x: x,\n        y: y\n    };\n}\n// means it doesn't take into account transforms.\nfunction getLayoutRect(element) {\n    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n    // Fixes https://github.com/popperjs/popper-core/issues/1223\n    var width = element.offsetWidth;\n    var height = element.offsetHeight;\n    if (Math.abs(clientRect.width - width) <= 1) {\n        width = clientRect.width;\n    }\n    if (Math.abs(clientRect.height - height) <= 1) {\n        height = clientRect.height;\n    }\n    return {\n        x: element.offsetLeft,\n        y: element.offsetTop,\n        width: width,\n        height: height\n    };\n}\nfunction contains(parent, child) {\n    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n    if (parent.contains(child)) {\n        return true;\n    } else if (rootNode && isShadowRoot(rootNode)) {\n        var next = child;\n        do {\n            if (next && parent.isSameNode(next)) {\n                return true;\n            } // $FlowFixMe[prop-missing]: need a better way to handle this...\n            next = next.parentNode || next.host;\n        }while (next);\n    } // Give up, the result is false\n    return false;\n}\nfunction getComputedStyle(element) {\n    return getWindow(element).getComputedStyle(element);\n}\nfunction isTableElement(element) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].indexOf(getNodeName(element)) >= 0;\n}\nfunction getDocumentElement(element) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;\n}\nfunction getParentNode(element) {\n    if (getNodeName(element) === \"html\") {\n        return element;\n    }\n    return(// $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element) // fallback\n    );\n}\nfunction getTrueOffsetParent(element) {\n    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n    getComputedStyle(element).position === \"fixed\") {\n        return null;\n    }\n    return element.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\nfunction getContainingBlock(element) {\n    var isFirefox = /firefox/i.test(getUAString());\n    var isIE = /Trident/i.test(getUAString());\n    if (isIE && isHTMLElement(element)) {\n        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n        var elementCss = getComputedStyle(element);\n        if (elementCss.position === \"fixed\") {\n            return null;\n        }\n    }\n    var currentNode = getParentNode(element);\n    if (isShadowRoot(currentNode)) {\n        currentNode = currentNode.host;\n    }\n    while(isHTMLElement(currentNode) && [\n        \"html\",\n        \"body\"\n    ].indexOf(getNodeName(currentNode)) < 0){\n        var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n        // create a containing block.\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n        if (css.transform !== \"none\" || css.perspective !== \"none\" || css.contain === \"paint\" || [\n            \"transform\",\n            \"perspective\"\n        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === \"filter\" || isFirefox && css.filter && css.filter !== \"none\") {\n            return currentNode;\n        } else {\n            currentNode = currentNode.parentNode;\n        }\n    }\n    return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element) {\n    var window1 = getWindow(element);\n    var offsetParent = getTrueOffsetParent(element);\n    while(offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === \"static\"){\n        offsetParent = getTrueOffsetParent(offsetParent);\n    }\n    if (offsetParent && (getNodeName(offsetParent) === \"html\" || getNodeName(offsetParent) === \"body\" && getComputedStyle(offsetParent).position === \"static\")) {\n        return window1;\n    }\n    return offsetParent || getContainingBlock(element) || window1;\n}\nfunction getMainAxisFromPlacement(placement) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].indexOf(placement) >= 0 ? \"x\" : \"y\";\n}\nfunction within(min$1, value, max$1) {\n    return max(min$1, min(value, max$1));\n}\nfunction withinMaxClamp(min, value, max) {\n    var v = within(min, value, max);\n    return v > max ? max : v;\n}\nfunction getFreshSideObject() {\n    return {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n    };\n}\nfunction mergePaddingObject(paddingObject) {\n    return Object.assign({}, getFreshSideObject(), paddingObject);\n}\nfunction expandToHashMap(value, keys) {\n    return keys.reduce(function(hashMap, key) {\n        hashMap[key] = value;\n        return hashMap;\n    }, {});\n}\nvar toPaddingObject = function toPaddingObject(padding, state) {\n    padding = typeof padding === \"function\" ? padding(Object.assign({}, state.rects, {\n        placement: state.placement\n    })) : padding;\n    return mergePaddingObject(typeof padding !== \"number\" ? padding : expandToHashMap(padding, basePlacements));\n};\nfunction arrow(_ref) {\n    var _state$modifiersData$;\n    var state = _ref.state, name = _ref.name, options = _ref.options;\n    var arrowElement = state.elements.arrow;\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var basePlacement = getBasePlacement(state.placement);\n    var axis = getMainAxisFromPlacement(basePlacement);\n    var isVertical = [\n        left,\n        right\n    ].indexOf(basePlacement) >= 0;\n    var len = isVertical ? \"height\" : \"width\";\n    if (!arrowElement || !popperOffsets) {\n        return;\n    }\n    var paddingObject = toPaddingObject(options.padding, state);\n    var arrowRect = getLayoutRect(arrowElement);\n    var minProp = axis === \"y\" ? top : left;\n    var maxProp = axis === \"y\" ? bottom : right;\n    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n    var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n    var arrowOffsetParent = getOffsetParent(arrowElement);\n    var clientSize = arrowOffsetParent ? axis === \"y\" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n    // outside of the popper bounds\n    var min = paddingObject[minProp];\n    var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n    var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n    var axisProp = axis;\n    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\nfunction effect$1(_ref2) {\n    var state = _ref2.state, options = _ref2.options;\n    var _options$element = options.element, arrowElement = _options$element === void 0 ? \"[data-popper-arrow]\" : _options$element;\n    if (arrowElement == null) {\n        return;\n    } // CSS selector\n    if (typeof arrowElement === \"string\") {\n        arrowElement = state.elements.popper.querySelector(arrowElement);\n        if (!arrowElement) {\n            return;\n        }\n    }\n    if (true) {\n        if (!isHTMLElement(arrowElement)) {\n            console.error([\n                'Popper: \"arrow\" element must be an HTMLElement (not an SVGElement).',\n                \"To use an SVG arrow, wrap it in an HTMLElement that will be used as\",\n                \"the arrow.\"\n            ].join(\" \"));\n        }\n    }\n    if (!contains(state.elements.popper, arrowElement)) {\n        if (true) {\n            console.error([\n                'Popper: \"arrow\" modifier\\'s `element` must be a child of the popper',\n                \"element.\"\n            ].join(\" \"));\n        }\n        return;\n    }\n    state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\nvar arrow$1 = {\n    name: \"arrow\",\n    enabled: true,\n    phase: \"main\",\n    fn: arrow,\n    effect: effect$1,\n    requires: [\n        \"popperOffsets\"\n    ],\n    requiresIfExists: [\n        \"preventOverflow\"\n    ]\n};\nfunction getVariation(placement) {\n    return placement.split(\"-\")[1];\n}\nvar unsetSides = {\n    top: \"auto\",\n    right: \"auto\",\n    bottom: \"auto\",\n    left: \"auto\"\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\nfunction roundOffsetsByDPR(_ref) {\n    var x = _ref.x, y = _ref.y;\n    var win = window;\n    var dpr = win.devicePixelRatio || 1;\n    return {\n        x: round(x * dpr) / dpr || 0,\n        y: round(y * dpr) / dpr || 0\n    };\n}\nfunction mapToStyles(_ref2) {\n    var _Object$assign2;\n    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;\n    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;\n    var _ref3 = typeof roundOffsets === \"function\" ? roundOffsets({\n        x: x,\n        y: y\n    }) : {\n        x: x,\n        y: y\n    };\n    x = _ref3.x;\n    y = _ref3.y;\n    var hasX = offsets.hasOwnProperty(\"x\");\n    var hasY = offsets.hasOwnProperty(\"y\");\n    var sideX = left;\n    var sideY = top;\n    var win = window;\n    if (adaptive) {\n        var offsetParent = getOffsetParent(popper);\n        var heightProp = \"clientHeight\";\n        var widthProp = \"clientWidth\";\n        if (offsetParent === getWindow(popper)) {\n            offsetParent = getDocumentElement(popper);\n            if (getComputedStyle(offsetParent).position !== \"static\" && position === \"absolute\") {\n                heightProp = \"scrollHeight\";\n                widthProp = \"scrollWidth\";\n            }\n        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n        offsetParent = offsetParent;\n        if (placement === top || (placement === left || placement === right) && variation === end) {\n            sideY = bottom;\n            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];\n            y -= offsetY - popperRect.height;\n            y *= gpuAcceleration ? 1 : -1;\n        }\n        if (placement === left || (placement === top || placement === bottom) && variation === end) {\n            sideX = right;\n            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];\n            x -= offsetX - popperRect.width;\n            x *= gpuAcceleration ? 1 : -1;\n        }\n    }\n    var commonStyles = Object.assign({\n        position: position\n    }, adaptive && unsetSides);\n    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n        x: x,\n        y: y\n    }) : {\n        x: x,\n        y: y\n    };\n    x = _ref4.x;\n    y = _ref4.y;\n    if (gpuAcceleration) {\n        var _Object$assign;\n        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? \"0\" : \"\", _Object$assign[sideX] = hasX ? \"0\" : \"\", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n    }\n    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : \"\", _Object$assign2[sideX] = hasX ? x + \"px\" : \"\", _Object$assign2.transform = \"\", _Object$assign2));\n}\nfunction computeStyles(_ref5) {\n    var state = _ref5.state, options = _ref5.options;\n    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n    if (true) {\n        var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || \"\";\n        if (adaptive && [\n            \"transform\",\n            \"top\",\n            \"right\",\n            \"bottom\",\n            \"left\"\n        ].some(function(property) {\n            return transitionProperty.indexOf(property) >= 0;\n        })) {\n            console.warn([\n                \"Popper: Detected CSS transitions on at least one of the following\",\n                'CSS properties: \"transform\", \"top\", \"right\", \"bottom\", \"left\".',\n                \"\\n\\n\",\n                'Disable the \"computeStyles\" modifier\\'s `adaptive` option to allow',\n                \"for smooth transitions, or remove these properties from the CSS\",\n                \"transition declaration on the popper element if only transitioning\",\n                \"opacity or background-color for example.\",\n                \"\\n\\n\",\n                \"We recommend using the popper element as a wrapper around an inner\",\n                \"element that can have any CSS property transitioned for animations.\"\n            ].join(\" \"));\n        }\n    }\n    var commonStyles = {\n        placement: getBasePlacement(state.placement),\n        variation: getVariation(state.placement),\n        popper: state.elements.popper,\n        popperRect: state.rects.popper,\n        gpuAcceleration: gpuAcceleration,\n        isFixed: state.options.strategy === \"fixed\"\n    };\n    if (state.modifiersData.popperOffsets != null) {\n        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n            offsets: state.modifiersData.popperOffsets,\n            position: state.options.strategy,\n            adaptive: adaptive,\n            roundOffsets: roundOffsets\n        })));\n    }\n    if (state.modifiersData.arrow != null) {\n        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n            offsets: state.modifiersData.arrow,\n            position: \"absolute\",\n            adaptive: false,\n            roundOffsets: roundOffsets\n        })));\n    }\n    state.attributes.popper = Object.assign({}, state.attributes.popper, {\n        \"data-popper-placement\": state.placement\n    });\n} // eslint-disable-next-line import/no-unused-modules\nvar computeStyles$1 = {\n    name: \"computeStyles\",\n    enabled: true,\n    phase: \"beforeWrite\",\n    fn: computeStyles,\n    data: {}\n};\nvar passive = {\n    passive: true\n};\nfunction effect(_ref) {\n    var state = _ref.state, instance = _ref.instance, options = _ref.options;\n    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;\n    var window1 = getWindow(state.elements.popper);\n    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n    if (scroll) {\n        scrollParents.forEach(function(scrollParent) {\n            scrollParent.addEventListener(\"scroll\", instance.update, passive);\n        });\n    }\n    if (resize) {\n        window1.addEventListener(\"resize\", instance.update, passive);\n    }\n    return function() {\n        if (scroll) {\n            scrollParents.forEach(function(scrollParent) {\n                scrollParent.removeEventListener(\"scroll\", instance.update, passive);\n            });\n        }\n        if (resize) {\n            window1.removeEventListener(\"resize\", instance.update, passive);\n        }\n    };\n} // eslint-disable-next-line import/no-unused-modules\nvar eventListeners = {\n    name: \"eventListeners\",\n    enabled: true,\n    phase: \"write\",\n    fn: function fn() {},\n    effect: effect,\n    data: {}\n};\nvar hash$1 = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n};\nfunction getOppositePlacement(placement) {\n    return placement.replace(/left|right|bottom|top/g, function(matched) {\n        return hash$1[matched];\n    });\n}\nvar hash = {\n    start: \"end\",\n    end: \"start\"\n};\nfunction getOppositeVariationPlacement(placement) {\n    return placement.replace(/start|end/g, function(matched) {\n        return hash[matched];\n    });\n}\nfunction getWindowScroll(node) {\n    var win = getWindow(node);\n    var scrollLeft = win.pageXOffset;\n    var scrollTop = win.pageYOffset;\n    return {\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n    };\n}\nfunction getWindowScrollBarX(element) {\n    // If <html> has a CSS width greater than the viewport, then this will be\n    // incorrect for RTL.\n    // Popper 1 is broken in this case and never had a bug report so let's assume\n    // it's not an issue. I don't think anyone ever specifies width on <html>\n    // anyway.\n    // Browsers where the left scrollbar doesn't cause an issue report `0` for\n    // this (e.g. Edge 2019, IE11, Safari)\n    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}\nfunction getViewportRect(element, strategy) {\n    var win = getWindow(element);\n    var html = getDocumentElement(element);\n    var visualViewport = win.visualViewport;\n    var width = html.clientWidth;\n    var height = html.clientHeight;\n    var x = 0;\n    var y = 0;\n    if (visualViewport) {\n        width = visualViewport.width;\n        height = visualViewport.height;\n        var layoutViewport = isLayoutViewport();\n        if (layoutViewport || !layoutViewport && strategy === \"fixed\") {\n            x = visualViewport.offsetLeft;\n            y = visualViewport.offsetTop;\n        }\n    }\n    return {\n        width: width,\n        height: height,\n        x: x + getWindowScrollBarX(element),\n        y: y\n    };\n}\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\nfunction getDocumentRect(element) {\n    var _element$ownerDocumen;\n    var html = getDocumentElement(element);\n    var winScroll = getWindowScroll(element);\n    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n    var y = -winScroll.scrollTop;\n    if (getComputedStyle(body || html).direction === \"rtl\") {\n        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n    }\n    return {\n        width: width,\n        height: height,\n        x: x,\n        y: y\n    };\n}\nfunction isScrollParent(element) {\n    // Firefox wants us to check `-x` and `-y` variations as well\n    var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;\n    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}\nfunction getScrollParent(node) {\n    if ([\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].indexOf(getNodeName(node)) >= 0) {\n        // $FlowFixMe[incompatible-return]: assume body is always available\n        return node.ownerDocument.body;\n    }\n    if (isHTMLElement(node) && isScrollParent(node)) {\n        return node;\n    }\n    return getScrollParent(getParentNode(node));\n}\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the\nreference element's position.\n*/ function listScrollParents(element, list) {\n    var _element$ownerDocumen;\n    if (list === void 0) {\n        list = [];\n    }\n    var scrollParent = getScrollParent(element);\n    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n    var win = getWindow(scrollParent);\n    var target = isBody ? [\n        win\n    ].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n    var updatedList = list.concat(target);\n    return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));\n}\nfunction rectToClientRect(rect) {\n    return Object.assign({}, rect, {\n        left: rect.x,\n        top: rect.y,\n        right: rect.x + rect.width,\n        bottom: rect.y + rect.height\n    });\n}\nfunction getInnerBoundingClientRect(element, strategy) {\n    var rect = getBoundingClientRect(element, false, strategy === \"fixed\");\n    rect.top = rect.top + element.clientTop;\n    rect.left = rect.left + element.clientLeft;\n    rect.bottom = rect.top + element.clientHeight;\n    rect.right = rect.left + element.clientWidth;\n    rect.width = element.clientWidth;\n    rect.height = element.clientHeight;\n    rect.x = rect.left;\n    rect.y = rect.top;\n    return rect;\n}\nfunction getClientRectFromMixedType(element, clippingParent, strategy) {\n    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\nfunction getClippingParents(element) {\n    var clippingParents = listScrollParents(getParentNode(element));\n    var canEscapeClipping = [\n        \"absolute\",\n        \"fixed\"\n    ].indexOf(getComputedStyle(element).position) >= 0;\n    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n    if (!isElement(clipperElement)) {\n        return [];\n    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n    return clippingParents.filter(function(clippingParent) {\n        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== \"body\";\n    });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\nfunction getClippingRect(element, boundary, rootBoundary, strategy) {\n    var mainClippingParents = boundary === \"clippingParents\" ? getClippingParents(element) : [].concat(boundary);\n    var clippingParents = [].concat(mainClippingParents, [\n        rootBoundary\n    ]);\n    var firstClippingParent = clippingParents[0];\n    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {\n        var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n        accRect.top = max(rect.top, accRect.top);\n        accRect.right = min(rect.right, accRect.right);\n        accRect.bottom = min(rect.bottom, accRect.bottom);\n        accRect.left = max(rect.left, accRect.left);\n        return accRect;\n    }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n    clippingRect.width = clippingRect.right - clippingRect.left;\n    clippingRect.height = clippingRect.bottom - clippingRect.top;\n    clippingRect.x = clippingRect.left;\n    clippingRect.y = clippingRect.top;\n    return clippingRect;\n}\nfunction computeOffsets(_ref) {\n    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;\n    var basePlacement = placement ? getBasePlacement(placement) : null;\n    var variation = placement ? getVariation(placement) : null;\n    var commonX = reference.x + reference.width / 2 - element.width / 2;\n    var commonY = reference.y + reference.height / 2 - element.height / 2;\n    var offsets;\n    switch(basePlacement){\n        case top:\n            offsets = {\n                x: commonX,\n                y: reference.y - element.height\n            };\n            break;\n        case bottom:\n            offsets = {\n                x: commonX,\n                y: reference.y + reference.height\n            };\n            break;\n        case right:\n            offsets = {\n                x: reference.x + reference.width,\n                y: commonY\n            };\n            break;\n        case left:\n            offsets = {\n                x: reference.x - element.width,\n                y: commonY\n            };\n            break;\n        default:\n            offsets = {\n                x: reference.x,\n                y: reference.y\n            };\n    }\n    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n    if (mainAxis != null) {\n        var len = mainAxis === \"y\" ? \"height\" : \"width\";\n        switch(variation){\n            case start:\n                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n                break;\n            case end:\n                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n                break;\n        }\n    }\n    return offsets;\n}\nfunction detectOverflow(state, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;\n    var paddingObject = mergePaddingObject(typeof padding !== \"number\" ? padding : expandToHashMap(padding, basePlacements));\n    var altContext = elementContext === popper ? reference : popper;\n    var popperRect = state.rects.popper;\n    var element = state.elements[altBoundary ? altContext : elementContext];\n    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n    var referenceClientRect = getBoundingClientRect(state.elements.reference);\n    var popperOffsets = computeOffsets({\n        reference: referenceClientRect,\n        element: popperRect,\n        strategy: \"absolute\",\n        placement: placement\n    });\n    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n    // 0 or negative = within the clipping rect\n    var overflowOffsets = {\n        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n        right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n    };\n    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n    if (elementContext === popper && offsetData) {\n        var offset = offsetData[placement];\n        Object.keys(overflowOffsets).forEach(function(key) {\n            var multiply = [\n                right,\n                bottom\n            ].indexOf(key) >= 0 ? 1 : -1;\n            var axis = [\n                top,\n                bottom\n            ].indexOf(key) >= 0 ? \"y\" : \"x\";\n            overflowOffsets[key] += offset[axis] * multiply;\n        });\n    }\n    return overflowOffsets;\n}\nfunction computeAutoPlacement(state, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;\n    var variation = getVariation(placement);\n    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement) {\n        return getVariation(placement) === variation;\n    }) : basePlacements;\n    var allowedPlacements = placements$1.filter(function(placement) {\n        return allowedAutoPlacements.indexOf(placement) >= 0;\n    });\n    if (allowedPlacements.length === 0) {\n        allowedPlacements = placements$1;\n        if (true) {\n            console.error([\n                \"Popper: The `allowedAutoPlacements` option did not allow any\",\n                \"placements. Ensure the `placement` option matches the variation\",\n                \"of the allowed placements.\",\n                'For example, \"auto\" cannot be used to allow \"bottom-start\".',\n                'Use \"auto-start\" instead.'\n            ].join(\" \"));\n        }\n    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n    var overflows = allowedPlacements.reduce(function(acc, placement) {\n        acc[placement] = detectOverflow(state, {\n            placement: placement,\n            boundary: boundary,\n            rootBoundary: rootBoundary,\n            padding: padding\n        })[getBasePlacement(placement)];\n        return acc;\n    }, {});\n    return Object.keys(overflows).sort(function(a, b) {\n        return overflows[a] - overflows[b];\n    });\n}\nfunction getExpandedFallbackPlacements(placement) {\n    if (getBasePlacement(placement) === auto) {\n        return [];\n    }\n    var oppositePlacement = getOppositePlacement(placement);\n    return [\n        getOppositeVariationPlacement(placement),\n        oppositePlacement,\n        getOppositeVariationPlacement(oppositePlacement)\n    ];\n}\nfunction flip(_ref) {\n    var state = _ref.state, options = _ref.options, name = _ref.name;\n    if (state.modifiersData[name]._skip) {\n        return;\n    }\n    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;\n    var preferredPlacement = state.options.placement;\n    var basePlacement = getBasePlacement(preferredPlacement);\n    var isBasePlacement = basePlacement === preferredPlacement;\n    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [\n        getOppositePlacement(preferredPlacement)\n    ] : getExpandedFallbackPlacements(preferredPlacement));\n    var placements = [\n        preferredPlacement\n    ].concat(fallbackPlacements).reduce(function(acc, placement) {\n        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n            placement: placement,\n            boundary: boundary,\n            rootBoundary: rootBoundary,\n            padding: padding,\n            flipVariations: flipVariations,\n            allowedAutoPlacements: allowedAutoPlacements\n        }) : placement);\n    }, []);\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var checksMap = new Map();\n    var makeFallbackChecks = true;\n    var firstFittingPlacement = placements[0];\n    for(var i = 0; i < placements.length; i++){\n        var placement = placements[i];\n        var _basePlacement = getBasePlacement(placement);\n        var isStartVariation = getVariation(placement) === start;\n        var isVertical = [\n            top,\n            bottom\n        ].indexOf(_basePlacement) >= 0;\n        var len = isVertical ? \"width\" : \"height\";\n        var overflow = detectOverflow(state, {\n            placement: placement,\n            boundary: boundary,\n            rootBoundary: rootBoundary,\n            altBoundary: altBoundary,\n            padding: padding\n        });\n        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n        if (referenceRect[len] > popperRect[len]) {\n            mainVariationSide = getOppositePlacement(mainVariationSide);\n        }\n        var altVariationSide = getOppositePlacement(mainVariationSide);\n        var checks = [];\n        if (checkMainAxis) {\n            checks.push(overflow[_basePlacement] <= 0);\n        }\n        if (checkAltAxis) {\n            checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n        }\n        if (checks.every(function(check) {\n            return check;\n        })) {\n            firstFittingPlacement = placement;\n            makeFallbackChecks = false;\n            break;\n        }\n        checksMap.set(placement, checks);\n    }\n    if (makeFallbackChecks) {\n        // `2` may be desired in some cases – research later\n        var numberOfChecks = flipVariations ? 3 : 1;\n        var _loop = function _loop(_i) {\n            var fittingPlacement = placements.find(function(placement) {\n                var checks = checksMap.get(placement);\n                if (checks) {\n                    return checks.slice(0, _i).every(function(check) {\n                        return check;\n                    });\n                }\n            });\n            if (fittingPlacement) {\n                firstFittingPlacement = fittingPlacement;\n                return \"break\";\n            }\n        };\n        for(var _i = numberOfChecks; _i > 0; _i--){\n            var _ret = _loop(_i);\n            if (_ret === \"break\") break;\n        }\n    }\n    if (state.placement !== firstFittingPlacement) {\n        state.modifiersData[name]._skip = true;\n        state.placement = firstFittingPlacement;\n        state.reset = true;\n    }\n} // eslint-disable-next-line import/no-unused-modules\nvar flip$1 = {\n    name: \"flip\",\n    enabled: true,\n    phase: \"main\",\n    fn: flip,\n    requiresIfExists: [\n        \"offset\"\n    ],\n    data: {\n        _skip: false\n    }\n};\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n    if (preventedOffsets === void 0) {\n        preventedOffsets = {\n            x: 0,\n            y: 0\n        };\n    }\n    return {\n        top: overflow.top - rect.height - preventedOffsets.y,\n        right: overflow.right - rect.width + preventedOffsets.x,\n        bottom: overflow.bottom - rect.height + preventedOffsets.y,\n        left: overflow.left - rect.width - preventedOffsets.x\n    };\n}\nfunction isAnySideFullyClipped(overflow) {\n    return [\n        top,\n        right,\n        bottom,\n        left\n    ].some(function(side) {\n        return overflow[side] >= 0;\n    });\n}\nfunction hide(_ref) {\n    var state = _ref.state, name = _ref.name;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var preventedOffsets = state.modifiersData.preventOverflow;\n    var referenceOverflow = detectOverflow(state, {\n        elementContext: \"reference\"\n    });\n    var popperAltOverflow = detectOverflow(state, {\n        altBoundary: true\n    });\n    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n    state.modifiersData[name] = {\n        referenceClippingOffsets: referenceClippingOffsets,\n        popperEscapeOffsets: popperEscapeOffsets,\n        isReferenceHidden: isReferenceHidden,\n        hasPopperEscaped: hasPopperEscaped\n    };\n    state.attributes.popper = Object.assign({}, state.attributes.popper, {\n        \"data-popper-reference-hidden\": isReferenceHidden,\n        \"data-popper-escaped\": hasPopperEscaped\n    });\n} // eslint-disable-next-line import/no-unused-modules\nvar hide$1 = {\n    name: \"hide\",\n    enabled: true,\n    phase: \"main\",\n    requiresIfExists: [\n        \"preventOverflow\"\n    ],\n    fn: hide\n};\nfunction distanceAndSkiddingToXY(placement, rects, offset) {\n    var basePlacement = getBasePlacement(placement);\n    var invertDistance = [\n        left,\n        top\n    ].indexOf(basePlacement) >= 0 ? -1 : 1;\n    var _ref = typeof offset === \"function\" ? offset(Object.assign({}, rects, {\n        placement: placement\n    })) : offset, skidding = _ref[0], distance = _ref[1];\n    skidding = skidding || 0;\n    distance = (distance || 0) * invertDistance;\n    return [\n        left,\n        right\n    ].indexOf(basePlacement) >= 0 ? {\n        x: distance,\n        y: skidding\n    } : {\n        x: skidding,\n        y: distance\n    };\n}\nfunction offset(_ref2) {\n    var state = _ref2.state, options = _ref2.options, name = _ref2.name;\n    var _options$offset = options.offset, offset = _options$offset === void 0 ? [\n        0,\n        0\n    ] : _options$offset;\n    var data = placements.reduce(function(acc, placement) {\n        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n        return acc;\n    }, {});\n    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;\n    if (state.modifiersData.popperOffsets != null) {\n        state.modifiersData.popperOffsets.x += x;\n        state.modifiersData.popperOffsets.y += y;\n    }\n    state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\nvar offset$1 = {\n    name: \"offset\",\n    enabled: true,\n    phase: \"main\",\n    requires: [\n        \"popperOffsets\"\n    ],\n    fn: offset\n};\nfunction popperOffsets(_ref) {\n    var state = _ref.state, name = _ref.name;\n    // Offsets are the actual position the popper needs to have to be\n    // properly positioned near its reference element\n    // This is the most basic placement, and will be adjusted by\n    // the modifiers in the next step\n    state.modifiersData[name] = computeOffsets({\n        reference: state.rects.reference,\n        element: state.rects.popper,\n        strategy: \"absolute\",\n        placement: state.placement\n    });\n} // eslint-disable-next-line import/no-unused-modules\nvar popperOffsets$1 = {\n    name: \"popperOffsets\",\n    enabled: true,\n    phase: \"read\",\n    fn: popperOffsets,\n    data: {}\n};\nfunction getAltAxis(axis) {\n    return axis === \"x\" ? \"y\" : \"x\";\n}\nfunction preventOverflow(_ref) {\n    var state = _ref.state, options = _ref.options, name = _ref.name;\n    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n    var overflow = detectOverflow(state, {\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        padding: padding,\n        altBoundary: altBoundary\n    });\n    var basePlacement = getBasePlacement(state.placement);\n    var variation = getVariation(state.placement);\n    var isBasePlacement = !variation;\n    var mainAxis = getMainAxisFromPlacement(basePlacement);\n    var altAxis = getAltAxis(mainAxis);\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var tetherOffsetValue = typeof tetherOffset === \"function\" ? tetherOffset(Object.assign({}, state.rects, {\n        placement: state.placement\n    })) : tetherOffset;\n    var normalizedTetherOffsetValue = typeof tetherOffsetValue === \"number\" ? {\n        mainAxis: tetherOffsetValue,\n        altAxis: tetherOffsetValue\n    } : Object.assign({\n        mainAxis: 0,\n        altAxis: 0\n    }, tetherOffsetValue);\n    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n    var data = {\n        x: 0,\n        y: 0\n    };\n    if (!popperOffsets) {\n        return;\n    }\n    if (checkMainAxis) {\n        var _offsetModifierState$;\n        var mainSide = mainAxis === \"y\" ? top : left;\n        var altSide = mainAxis === \"y\" ? bottom : right;\n        var len = mainAxis === \"y\" ? \"height\" : \"width\";\n        var offset = popperOffsets[mainAxis];\n        var min$1 = offset + overflow[mainSide];\n        var max$1 = offset - overflow[altSide];\n        var additive = tether ? -popperRect[len] / 2 : 0;\n        var minLen = variation === start ? referenceRect[len] : popperRect[len];\n        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n        // outside the reference bounds\n        var arrowElement = state.elements.arrow;\n        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n            width: 0,\n            height: 0\n        };\n        var arrowPaddingObject = state.modifiersData[\"arrow#persistent\"] ? state.modifiersData[\"arrow#persistent\"].padding : getFreshSideObject();\n        var arrowPaddingMin = arrowPaddingObject[mainSide];\n        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n        // to include its full size in the calculation. If the reference is small\n        // and near the edge of a boundary, the popper can overflow even if the\n        // reference is not overflowing as well (e.g. virtual elements with no\n        // width or height)\n        var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n        var clientOffset = arrowOffsetParent ? mainAxis === \"y\" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n        var tetherMax = offset + maxOffset - offsetModifierValue;\n        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);\n        popperOffsets[mainAxis] = preventedOffset;\n        data[mainAxis] = preventedOffset - offset;\n    }\n    if (checkAltAxis) {\n        var _offsetModifierState$2;\n        var _mainSide = mainAxis === \"x\" ? top : left;\n        var _altSide = mainAxis === \"x\" ? bottom : right;\n        var _offset = popperOffsets[altAxis];\n        var _len = altAxis === \"y\" ? \"height\" : \"width\";\n        var _min = _offset + overflow[_mainSide];\n        var _max = _offset - overflow[_altSide];\n        var isOriginSide = [\n            top,\n            left\n        ].indexOf(basePlacement) !== -1;\n        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n        popperOffsets[altAxis] = _preventedOffset;\n        data[altAxis] = _preventedOffset - _offset;\n    }\n    state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\nvar preventOverflow$1 = {\n    name: \"preventOverflow\",\n    enabled: true,\n    phase: \"main\",\n    fn: preventOverflow,\n    requiresIfExists: [\n        \"offset\"\n    ]\n};\nfunction getHTMLElementScroll(element) {\n    return {\n        scrollLeft: element.scrollLeft,\n        scrollTop: element.scrollTop\n    };\n}\nfunction getNodeScroll(node) {\n    if (node === getWindow(node) || !isHTMLElement(node)) {\n        return getWindowScroll(node);\n    } else {\n        return getHTMLElementScroll(node);\n    }\n}\nfunction isElementScaled(element) {\n    var rect = element.getBoundingClientRect();\n    var scaleX = round(rect.width) / element.offsetWidth || 1;\n    var scaleY = round(rect.height) / element.offsetHeight || 1;\n    return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\nfunction getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n    if (isFixed === void 0) {\n        isFixed = false;\n    }\n    var isOffsetParentAnElement = isHTMLElement(offsetParent);\n    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n    var documentElement = getDocumentElement(offsetParent);\n    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n    var scroll = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    var offsets = {\n        x: 0,\n        y: 0\n    };\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n        if (getNodeName(offsetParent) !== \"body\" || // https://github.com/popperjs/popper-core/issues/1078\n        isScrollParent(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isHTMLElement(offsetParent)) {\n            offsets = getBoundingClientRect(offsetParent, true);\n            offsets.x += offsetParent.clientLeft;\n            offsets.y += offsetParent.clientTop;\n        } else if (documentElement) {\n            offsets.x = getWindowScrollBarX(documentElement);\n        }\n    }\n    return {\n        x: rect.left + scroll.scrollLeft - offsets.x,\n        y: rect.top + scroll.scrollTop - offsets.y,\n        width: rect.width,\n        height: rect.height\n    };\n}\nfunction order(modifiers) {\n    var map = new Map();\n    var visited = new Set();\n    var result = [];\n    modifiers.forEach(function(modifier) {\n        map.set(modifier.name, modifier);\n    }); // On visiting object, check for its dependencies and visit them recursively\n    function sort(modifier) {\n        visited.add(modifier.name);\n        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n        requires.forEach(function(dep) {\n            if (!visited.has(dep)) {\n                var depModifier = map.get(dep);\n                if (depModifier) {\n                    sort(depModifier);\n                }\n            }\n        });\n        result.push(modifier);\n    }\n    modifiers.forEach(function(modifier) {\n        if (!visited.has(modifier.name)) {\n            // check for visited object\n            sort(modifier);\n        }\n    });\n    return result;\n}\nfunction orderModifiers(modifiers) {\n    // order based on dependencies\n    var orderedModifiers = order(modifiers); // order based on phase\n    return modifierPhases.reduce(function(acc, phase) {\n        return acc.concat(orderedModifiers.filter(function(modifier) {\n            return modifier.phase === phase;\n        }));\n    }, []);\n}\nfunction debounce(fn) {\n    var pending;\n    return function() {\n        if (!pending) {\n            pending = new Promise(function(resolve) {\n                Promise.resolve().then(function() {\n                    pending = undefined;\n                    resolve(fn());\n                });\n            });\n        }\n        return pending;\n    };\n}\nfunction format(str) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return [].concat(args).reduce(function(p, c) {\n        return p.replace(/%s/, c);\n    }, str);\n}\nvar INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nvar MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nvar VALID_PROPERTIES = [\n    \"name\",\n    \"enabled\",\n    \"phase\",\n    \"fn\",\n    \"effect\",\n    \"requires\",\n    \"options\"\n];\nfunction validateModifiers(modifiers) {\n    modifiers.forEach(function(modifier) {\n        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`\n        .filter(function(value, index, self) {\n            return self.indexOf(value) === index;\n        }).forEach(function(key) {\n            switch(key){\n                case \"name\":\n                    if (typeof modifier.name !== \"string\") {\n                        console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', '\"' + String(modifier.name) + '\"'));\n                    }\n                    break;\n                case \"enabled\":\n                    if (typeof modifier.enabled !== \"boolean\") {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', '\"' + String(modifier.enabled) + '\"'));\n                    }\n                    break;\n                case \"phase\":\n                    if (modifierPhases.indexOf(modifier.phase) < 0) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + modifierPhases.join(\", \"), '\"' + String(modifier.phase) + '\"'));\n                    }\n                    break;\n                case \"fn\":\n                    if (typeof modifier.fn !== \"function\") {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', '\"' + String(modifier.fn) + '\"'));\n                    }\n                    break;\n                case \"effect\":\n                    if (modifier.effect != null && typeof modifier.effect !== \"function\") {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', '\"' + String(modifier.fn) + '\"'));\n                    }\n                    break;\n                case \"requires\":\n                    if (modifier.requires != null && !Array.isArray(modifier.requires)) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', '\"' + String(modifier.requires) + '\"'));\n                    }\n                    break;\n                case \"requiresIfExists\":\n                    if (!Array.isArray(modifier.requiresIfExists)) {\n                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', '\"' + String(modifier.requiresIfExists) + '\"'));\n                    }\n                    break;\n                case \"options\":\n                case \"data\":\n                    break;\n                default:\n                    console.error('PopperJS: an invalid property has been provided to the \"' + modifier.name + '\" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {\n                        return '\"' + s + '\"';\n                    }).join(\", \") + '; but \"' + key + '\" was provided.');\n            }\n            modifier.requires && modifier.requires.forEach(function(requirement) {\n                if (modifiers.find(function(mod) {\n                    return mod.name === requirement;\n                }) == null) {\n                    console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n                }\n            });\n        });\n    });\n}\nfunction uniqueBy(arr, fn) {\n    var identifiers = new Set();\n    return arr.filter(function(item) {\n        var identifier = fn(item);\n        if (!identifiers.has(identifier)) {\n            identifiers.add(identifier);\n            return true;\n        }\n    });\n}\nfunction mergeByName(modifiers) {\n    var merged = modifiers.reduce(function(merged, current) {\n        var existing = merged[current.name];\n        merged[current.name] = existing ? Object.assign({}, existing, current, {\n            options: Object.assign({}, existing.options, current.options),\n            data: Object.assign({}, existing.data, current.data)\n        }) : current;\n        return merged;\n    }, {}); // IE11 does not support Object.values\n    return Object.keys(merged).map(function(key) {\n        return merged[key];\n    });\n}\nvar INVALID_ELEMENT_ERROR = \"Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.\";\nvar INFINITE_LOOP_ERROR = \"Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.\";\nvar DEFAULT_OPTIONS = {\n    placement: \"bottom\",\n    modifiers: [],\n    strategy: \"absolute\"\n};\nfunction areValidElements() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    return !args.some(function(element) {\n        return !(element && typeof element.getBoundingClientRect === \"function\");\n    });\n}\nfunction popperGenerator(generatorOptions) {\n    if (generatorOptions === void 0) {\n        generatorOptions = {};\n    }\n    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n    return function createPopper(reference, popper, options) {\n        if (options === void 0) {\n            options = defaultOptions;\n        }\n        var state = {\n            placement: \"bottom\",\n            orderedModifiers: [],\n            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n            modifiersData: {},\n            elements: {\n                reference: reference,\n                popper: popper\n            },\n            attributes: {},\n            styles: {}\n        };\n        var effectCleanupFns = [];\n        var isDestroyed = false;\n        var instance = {\n            state: state,\n            setOptions: function setOptions(setOptionsAction) {\n                var options = typeof setOptionsAction === \"function\" ? setOptionsAction(state.options) : setOptionsAction;\n                cleanupModifierEffects();\n                state.options = Object.assign({}, defaultOptions, state.options, options);\n                state.scrollParents = {\n                    reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n                    popper: listScrollParents(popper)\n                }; // Orders the modifiers based on their dependencies and `phase`\n                // properties\n                var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n                state.orderedModifiers = orderedModifiers.filter(function(m) {\n                    return m.enabled;\n                }); // Validate the provided modifiers so that the consumer will get warned\n                // if one of the modifiers is invalid for any reason\n                if (true) {\n                    var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {\n                        var name = _ref.name;\n                        return name;\n                    });\n                    validateModifiers(modifiers);\n                    if (getBasePlacement(state.options.placement) === auto) {\n                        var flipModifier = state.orderedModifiers.find(function(_ref2) {\n                            var name = _ref2.name;\n                            return name === \"flip\";\n                        });\n                        if (!flipModifier) {\n                            console.error([\n                                'Popper: \"auto\" placements require the \"flip\" modifier be',\n                                \"present and enabled to work.\"\n                            ].join(\" \"));\n                        }\n                    }\n                    var _getComputedStyle = getComputedStyle(popper), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can\n                    // cause bugs with positioning, so we'll warn the consumer\n                    if ([\n                        marginTop,\n                        marginRight,\n                        marginBottom,\n                        marginLeft\n                    ].some(function(margin) {\n                        return parseFloat(margin);\n                    })) {\n                        console.warn([\n                            'Popper: CSS \"margin\" styles cannot be used to apply padding',\n                            \"between the popper and its reference element or boundary.\",\n                            \"To replicate margin, use the `offset` modifier, as well as\",\n                            \"the `padding` option in the `preventOverflow` and `flip`\",\n                            \"modifiers.\"\n                        ].join(\" \"));\n                    }\n                }\n                runModifierEffects();\n                return instance.update();\n            },\n            // Sync update – it will always be executed, even if not necessary. This\n            // is useful for low frequency updates where sync behavior simplifies the\n            // logic.\n            // For high frequency updates (e.g. `resize` and `scroll` events), always\n            // prefer the async Popper#update method\n            forceUpdate: function forceUpdate() {\n                if (isDestroyed) {\n                    return;\n                }\n                var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n                // anymore\n                if (!areValidElements(reference, popper)) {\n                    if (true) {\n                        console.error(INVALID_ELEMENT_ERROR);\n                    }\n                    return;\n                } // Store the reference and popper rects to be read by modifiers\n                state.rects = {\n                    reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === \"fixed\"),\n                    popper: getLayoutRect(popper)\n                }; // Modifiers have the ability to reset the current update cycle. The\n                // most common use case for this is the `flip` modifier changing the\n                // placement, which then needs to re-run all the modifiers, because the\n                // logic was previously ran for the previous placement and is therefore\n                // stale/incorrect\n                state.reset = false;\n                state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n                // is filled with the initial data specified by the modifier. This means\n                // it doesn't persist and is fresh on each update.\n                // To ensure persistent data, use `${name}#persistent`\n                state.orderedModifiers.forEach(function(modifier) {\n                    return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n                });\n                var __debug_loops__ = 0;\n                for(var index = 0; index < state.orderedModifiers.length; index++){\n                    if (true) {\n                        __debug_loops__ += 1;\n                        if (__debug_loops__ > 100) {\n                            console.error(INFINITE_LOOP_ERROR);\n                            break;\n                        }\n                    }\n                    if (state.reset === true) {\n                        state.reset = false;\n                        index = -1;\n                        continue;\n                    }\n                    var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;\n                    if (typeof fn === \"function\") {\n                        state = fn({\n                            state: state,\n                            options: _options,\n                            name: name,\n                            instance: instance\n                        }) || state;\n                    }\n                }\n            },\n            // Async and optimistically optimized update – it will not be executed if\n            // not necessary (debounced to run at most once-per-tick)\n            update: debounce(function() {\n                return new Promise(function(resolve) {\n                    instance.forceUpdate();\n                    resolve(state);\n                });\n            }),\n            destroy: function destroy() {\n                cleanupModifierEffects();\n                isDestroyed = true;\n            }\n        };\n        if (!areValidElements(reference, popper)) {\n            if (true) {\n                console.error(INVALID_ELEMENT_ERROR);\n            }\n            return instance;\n        }\n        instance.setOptions(options).then(function(state) {\n            if (!isDestroyed && options.onFirstUpdate) {\n                options.onFirstUpdate(state);\n            }\n        }); // Modifiers have the ability to execute arbitrary code before the first\n        // update cycle runs. They will be executed in the same order as the update\n        // cycle. This is useful when a modifier adds some persistent data that\n        // other modifiers need to use, but the modifier is run after the dependent\n        // one.\n        function runModifierEffects() {\n            state.orderedModifiers.forEach(function(_ref3) {\n                var name = _ref3.name, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {} : _ref3$options, effect = _ref3.effect;\n                if (typeof effect === \"function\") {\n                    var cleanupFn = effect({\n                        state: state,\n                        name: name,\n                        instance: instance,\n                        options: options\n                    });\n                    var noopFn = function noopFn() {};\n                    effectCleanupFns.push(cleanupFn || noopFn);\n                }\n            });\n        }\n        function cleanupModifierEffects() {\n            effectCleanupFns.forEach(function(fn) {\n                return fn();\n            });\n            effectCleanupFns = [];\n        }\n        return instance;\n    };\n}\nvar defaultModifiers = [\n    eventListeners,\n    popperOffsets$1,\n    computeStyles$1,\n    applyStyles$1,\n    offset$1,\n    flip$1,\n    preventOverflow$1,\n    arrow$1,\n    hide$1\n];\nvar createPopper = /*#__PURE__*/ popperGenerator({\n    defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\nvar usePopper = function(options) {\n    var level = options.level, buttonRef = options.buttonRef, contentRef = options.contentRef;\n    var _a = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(SidebarContext), collapsed = _a.collapsed, toggled = _a.toggled, transitionDuration = _a.transitionDuration;\n    var popperInstanceRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef();\n    /**\r\n     * create popper instance only on first level submenu components and when sidebar is collapsed\r\n     */ react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        if (level === 0 && collapsed && contentRef.current && buttonRef.current) {\n            popperInstanceRef.current = createPopper(buttonRef.current, contentRef.current, {\n                placement: \"right\",\n                strategy: \"fixed\",\n                modifiers: [\n                    {\n                        name: \"offset\",\n                        options: {\n                            offset: [\n                                0,\n                                5\n                            ]\n                        }\n                    }\n                ]\n            });\n        }\n        return function() {\n            var _a;\n            return (_a = popperInstanceRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n        };\n    }, [\n        level,\n        collapsed,\n        contentRef,\n        buttonRef\n    ]);\n    /**\r\n     * update popper instance (position) when buttonRef or contentRef changes\r\n     */ react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        if (contentRef.current && buttonRef.current) {\n            var ro = new ResizeObserver(function() {\n                var _a;\n                (_a = popperInstanceRef.current) === null || _a === void 0 ? void 0 : _a.update();\n            });\n            ro.observe(contentRef.current);\n            ro.observe(buttonRef.current);\n        }\n        setTimeout(function() {\n            var _a;\n            (_a = popperInstanceRef.current) === null || _a === void 0 ? void 0 : _a.update();\n        }, transitionDuration);\n    }, [\n        transitionDuration,\n        toggled,\n        contentRef,\n        buttonRef\n    ]);\n    return {\n        popperInstance: popperInstanceRef.current\n    };\n};\nvar menuButtonStyles = function(props) {\n    var rtl = props.rtl, level = props.level, collapsed = props.collapsed, disabled = props.disabled, active = props.active;\n    return \"\\n    display: flex;\\n    align-items: center;\\n    height: 50px;\\n    text-decoration: none;\\n    color: inherit;\\n    box-sizing: border-box;\\n    cursor: pointer;\\n\\n    \".concat(rtl ? \"padding-left: 20px;\\n           padding-right: \".concat(level === 0 ? 20 : (collapsed ? level : level + 1) * 20, \"px;\\n            \") : \"padding-right: 20px;\\n           padding-left: \".concat(level === 0 ? 20 : (collapsed ? level : level + 1) * 20, \"px;\\n           \"), \"\\n\\n    &:hover {\\n      background-color: #f3f3f3;\\n    }\\n\\n    \").concat(disabled && \" \\n      pointer-events: none;\\n      cursor: default;\\n      color:#adadad;\\n        \", \"\\n\\n    \").concat(active && \"background-color: #e2eef9;\", \"\\n  \\n  \");\n};\nvar MenuButtonRef = function(_a, ref) {\n    var className = _a.className, component = _a.component, children = _a.children, rest = __rest(_a, [\n        \"className\",\n        \"component\",\n        \"children\"\n    ]);\n    if (component) {\n        if (typeof component === \"string\") {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(component, __assign(__assign({\n                className: classnames(className)\n            }, rest), {\n                ref: ref\n            }), children);\n        } else {\n            var _b = component.props, classNameProp = _b.className, props = __rest(_b, [\n                \"className\"\n            ]);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(component, __assign(__assign(__assign({\n                className: classnames(className, classNameProp)\n            }, rest), props), {\n                ref: ref\n            }), children);\n        }\n    } else {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", __assign({\n            ref: ref,\n            className: classnames(className)\n        }, rest), children);\n    }\n};\nvar MenuButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(MenuButtonRef);\nvar StyledSubMenu = newStyled.li(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([\n    \"\\n  position: relative;\\n  width: 100%;\\n\\n  \",\n    \";\\n\\n  \",\n    \";\\n\\n  > .\",\n    \" {\\n    \",\n    \";\\n\\n    \",\n    \";\\n  }\\n\"\n], [\n    \"\\n  position: relative;\\n  width: 100%;\\n\\n  \",\n    \";\\n\\n  \",\n    \";\\n\\n  > .\",\n    \" {\\n    \",\n    \";\\n\\n    \",\n    \";\\n  }\\n\"\n])), function(_a) {\n    var menuItemStyles = _a.menuItemStyles;\n    return menuItemStyles;\n}, function(_a) {\n    var rootStyles = _a.rootStyles;\n    return rootStyles;\n}, menuClasses.button, function(_a) {\n    var level = _a.level, disabled = _a.disabled, active = _a.active, collapsed = _a.collapsed, rtl = _a.rtl;\n    return menuButtonStyles({\n        level: level,\n        disabled: disabled,\n        active: active,\n        collapsed: collapsed,\n        rtl: rtl\n    });\n}, function(_a) {\n    var buttonStyles = _a.buttonStyles;\n    return buttonStyles;\n});\nvar SubMenuFR = function(_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, label = _a.label, icon = _a.icon, title = _a.title, prefix = _a.prefix, suffix = _a.suffix, openControlled = _a.open, defaultOpen = _a.defaultOpen, _c = _a.active, active = _c === void 0 ? false : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, rootStyles = _a.rootStyles, component = _a.component, onOpenChange = _a.onOpenChange, onClick = _a.onClick, onKeyUp = _a.onKeyUp, rest = __rest(_a, [\n        \"children\",\n        \"className\",\n        \"label\",\n        \"icon\",\n        \"title\",\n        \"prefix\",\n        \"suffix\",\n        \"open\",\n        \"defaultOpen\",\n        \"active\",\n        \"disabled\",\n        \"rootStyles\",\n        \"component\",\n        \"onOpenChange\",\n        \"onClick\",\n        \"onKeyUp\"\n    ]);\n    var level = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(LevelContext);\n    var _e = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(SidebarContext), collapsed = _e.collapsed, rtl = _e.rtl, sidebarTransitionDuration = _e.transitionDuration;\n    var _f = useMenu(), renderExpandIcon = _f.renderExpandIcon, closeOnClick = _f.closeOnClick, menuItemStyles = _f.menuItemStyles, transitionDuration = _f.transitionDuration;\n    var _g = react__WEBPACK_IMPORTED_MODULE_0___default().useState(!!defaultOpen), open = _g[0], setOpen = _g[1];\n    var _h = react__WEBPACK_IMPORTED_MODULE_0___default().useState(false), openWhenCollapsed = _h[0], setOpenWhenCollapsed = _h[1];\n    var _j = react__WEBPACK_IMPORTED_MODULE_0___default().useState(false), mounted = _j[0], setMounted = _j[1];\n    var buttonRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef(null);\n    var contentRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef(null);\n    var timer = react__WEBPACK_IMPORTED_MODULE_0___default().useRef();\n    var popperInstance = usePopper({\n        level: level,\n        buttonRef: buttonRef,\n        contentRef: contentRef\n    }).popperInstance;\n    var expandContent = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function() {\n        var _a;\n        var target = contentRef.current;\n        if (target) {\n            var height = (_a = target === null || target === void 0 ? void 0 : target.querySelector(\".\".concat(menuClasses.subMenuContent, \" > ul\"))) === null || _a === void 0 ? void 0 : _a.clientHeight;\n            target.style.overflow = \"hidden\";\n            target.style.height = \"\".concat(height, \"px\");\n            timer.current = setTimeout(function() {\n                target.style.overflow = \"auto\";\n                target.style.height = \"auto\";\n            }, transitionDuration);\n        }\n    }, [\n        transitionDuration\n    ]);\n    var collapseContent = function() {\n        var _a;\n        var target = contentRef.current;\n        if (target) {\n            var height = (_a = target === null || target === void 0 ? void 0 : target.querySelector(\".\".concat(menuClasses.subMenuContent, \" > ul\"))) === null || _a === void 0 ? void 0 : _a.clientHeight;\n            target.style.overflow = \"hidden\";\n            target.style.height = \"\".concat(height, \"px\");\n            target.offsetHeight;\n            target.style.height = \"0px\";\n        }\n    };\n    var handleSlideToggle = function() {\n        if (!(level === 0 && collapsed)) {\n            if (typeof openControlled === \"undefined\") {\n                clearTimeout(Number(timer.current));\n                open ? collapseContent() : expandContent();\n                onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(!open);\n                setOpen(!open);\n            } else {\n                onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(!openControlled);\n            }\n        }\n    };\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        if (!(level === 0 && collapsed) && typeof openControlled !== \"undefined\" && mounted) {\n            clearTimeout(Number(timer.current));\n            !openControlled ? collapseContent() : expandContent();\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        collapsed,\n        expandContent,\n        label,\n        level,\n        onOpenChange,\n        openControlled\n    ]);\n    var handleOnClick = function(event) {\n        onClick === null || onClick === void 0 ? void 0 : onClick(event);\n        handleSlideToggle();\n    };\n    var handleOnKeyUp = function(event) {\n        onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(event);\n        if (event.key === \"Enter\") {\n            handleSlideToggle();\n        }\n    };\n    var getSubMenuItemStyles = function(element) {\n        if (menuItemStyles) {\n            var params = {\n                level: level,\n                disabled: disabled,\n                active: active,\n                isSubmenu: true,\n                open: openControlled !== null && openControlled !== void 0 ? openControlled : open\n            };\n            var rootElStyles = menuItemStyles.root, buttonElStyles = menuItemStyles.button, labelElStyles = menuItemStyles.label, iconElStyles = menuItemStyles.icon, prefixElStyles = menuItemStyles.prefix, suffixElStyles = menuItemStyles.suffix, subMenuContentElStyles = menuItemStyles.subMenuContent, SubMenuExpandIconElStyles = menuItemStyles.SubMenuExpandIcon;\n            switch(element){\n                case \"root\":\n                    return typeof rootElStyles === \"function\" ? rootElStyles(params) : rootElStyles;\n                case \"button\":\n                    return typeof buttonElStyles === \"function\" ? buttonElStyles(params) : buttonElStyles;\n                case \"label\":\n                    return typeof labelElStyles === \"function\" ? labelElStyles(params) : labelElStyles;\n                case \"icon\":\n                    return typeof iconElStyles === \"function\" ? iconElStyles(params) : iconElStyles;\n                case \"prefix\":\n                    return typeof prefixElStyles === \"function\" ? prefixElStyles(params) : prefixElStyles;\n                case \"suffix\":\n                    return typeof suffixElStyles === \"function\" ? suffixElStyles(params) : suffixElStyles;\n                case \"SubMenuExpandIcon\":\n                    return typeof SubMenuExpandIconElStyles === \"function\" ? SubMenuExpandIconElStyles(params) : SubMenuExpandIconElStyles;\n                case \"subMenuContent\":\n                    return typeof subMenuContentElStyles === \"function\" ? subMenuContentElStyles(params) : subMenuContentElStyles;\n                default:\n                    return undefined;\n            }\n        }\n    };\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        setTimeout(function() {\n            return popperInstance === null || popperInstance === void 0 ? void 0 : popperInstance.update();\n        }, sidebarTransitionDuration);\n        if (collapsed && level === 0) {\n            setOpenWhenCollapsed(false);\n        // ? if its useful to close first level submenus on collapse sidebar uncomment the code below\n        // setOpen(false);\n        }\n    }, [\n        collapsed,\n        level,\n        rtl,\n        sidebarTransitionDuration,\n        popperInstance\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        var handleTogglePopper = function(target) {\n            var _a, _b, _c;\n            if (!openWhenCollapsed && ((_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.contains(target))) setOpenWhenCollapsed(true);\n            else if (closeOnClick && !((_b = target.closest(\".\".concat(menuClasses.menuItemRoot))) === null || _b === void 0 ? void 0 : _b.classList.contains(menuClasses.subMenuRoot)) || !((_c = contentRef.current) === null || _c === void 0 ? void 0 : _c.contains(target)) && openWhenCollapsed) {\n                setOpenWhenCollapsed(false);\n            }\n        };\n        var handleDocumentClick = function(event) {\n            handleTogglePopper(event.target);\n        };\n        var handleDocumentKeyUp = function(event) {\n            if (event.key === \"Enter\") {\n                handleTogglePopper(event.target);\n            } else if (event.key === \"Escape\") {\n                setOpenWhenCollapsed(false);\n            }\n        };\n        var removeEventListeners = function() {\n            document.removeEventListener(\"click\", handleDocumentClick);\n            document.removeEventListener(\"keyup\", handleDocumentKeyUp);\n        };\n        removeEventListeners();\n        if (collapsed && level === 0) {\n            document.addEventListener(\"click\", handleDocumentClick, false);\n            document.addEventListener(\"keyup\", handleDocumentKeyUp, false);\n        }\n        return function() {\n            removeEventListeners();\n        };\n    }, [\n        collapsed,\n        level,\n        closeOnClick,\n        openWhenCollapsed\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        setMounted(true);\n    }, []);\n    var sharedClasses = (_b = {}, _b[menuClasses.active] = active, _b[menuClasses.disabled] = disabled, _b[menuClasses.open] = openControlled !== null && openControlled !== void 0 ? openControlled : open, _b);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledSubMenu, {\n        ref: ref,\n        className: classnames(menuClasses.menuItemRoot, menuClasses.subMenuRoot, sharedClasses, className),\n        menuItemStyles: getSubMenuItemStyles(\"root\"),\n        level: level,\n        collapsed: collapsed,\n        rtl: rtl,\n        disabled: disabled,\n        active: active,\n        buttonStyles: getSubMenuItemStyles(\"button\"),\n        rootStyles: rootStyles\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MenuButton, __assign({\n        \"data-testid\": \"\".concat(menuClasses.button, \"-test-id\"),\n        ref: buttonRef,\n        title: title,\n        className: classnames(menuClasses.button, sharedClasses),\n        onClick: handleOnClick,\n        onKeyUp: handleOnKeyUp,\n        component: component,\n        tabIndex: 0\n    }, rest), icon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledMenuIcon, {\n        rtl: rtl,\n        className: classnames(menuClasses.icon, sharedClasses),\n        rootStyles: getSubMenuItemStyles(\"icon\")\n    }, icon), prefix && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledMenuPrefix, {\n        collapsed: collapsed,\n        transitionDuration: sidebarTransitionDuration,\n        firstLevel: level === 0,\n        className: classnames(menuClasses.prefix, sharedClasses),\n        rtl: rtl,\n        rootStyles: getSubMenuItemStyles(\"prefix\")\n    }, prefix), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledMenuLabel, {\n        className: classnames(menuClasses.label, sharedClasses),\n        rootStyles: getSubMenuItemStyles(\"label\")\n    }, label), suffix && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledMenuSuffix, {\n        collapsed: collapsed,\n        transitionDuration: sidebarTransitionDuration,\n        firstLevel: level === 0,\n        className: classnames(menuClasses.suffix, sharedClasses),\n        rootStyles: getSubMenuItemStyles(\"suffix\")\n    }, suffix), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledExpandIconWrapper, {\n        rtl: rtl,\n        className: classnames(menuClasses.SubMenuExpandIcon, sharedClasses),\n        collapsed: collapsed,\n        level: level,\n        rootStyles: getSubMenuItemStyles(\"SubMenuExpandIcon\")\n    }, renderExpandIcon ? renderExpandIcon({\n        level: level,\n        disabled: disabled,\n        active: active,\n        open: openControlled !== null && openControlled !== void 0 ? openControlled : open\n    }) : collapsed && level === 0 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledExpandIconCollapsed, null) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledExpandIcon, {\n        rtl: rtl,\n        open: openControlled !== null && openControlled !== void 0 ? openControlled : open\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SubMenuContent, {\n        ref: contentRef,\n        openWhenCollapsed: openWhenCollapsed,\n        open: openControlled !== null && openControlled !== void 0 ? openControlled : open,\n        firstLevel: level === 0,\n        collapsed: collapsed,\n        defaultOpen: openControlled && !mounted || defaultOpen,\n        className: classnames(menuClasses.subMenuContent, sharedClasses),\n        rootStyles: getSubMenuItemStyles(\"subMenuContent\")\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LevelContext.Provider, {\n        value: level + 1\n    }, children)));\n};\nvar SubMenu = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(SubMenuFR);\nvar templateObject_1$1;\nvar StyledMenuItem = newStyled.li(templateObject_1 || (templateObject_1 = __makeTemplateObject([\n    \"\\n  width: 100%;\\n  position: relative;\\n\\n  \",\n    \";\\n\\n  \",\n    \";\\n\\n  > .\",\n    \" {\\n    \",\n    \";\\n\\n    \",\n    \";\\n  }\\n\"\n], [\n    \"\\n  width: 100%;\\n  position: relative;\\n\\n  \",\n    \";\\n\\n  \",\n    \";\\n\\n  > .\",\n    \" {\\n    \",\n    \";\\n\\n    \",\n    \";\\n  }\\n\"\n])), function(_a) {\n    var menuItemStyles = _a.menuItemStyles;\n    return menuItemStyles;\n}, function(_a) {\n    var rootStyles = _a.rootStyles;\n    return rootStyles;\n}, menuClasses.button, function(_a) {\n    var level = _a.level, disabled = _a.disabled, active = _a.active, collapsed = _a.collapsed, rtl = _a.rtl;\n    return menuButtonStyles({\n        level: level,\n        disabled: disabled,\n        active: active,\n        collapsed: collapsed,\n        rtl: rtl\n    });\n}, function(_a) {\n    var buttonStyles = _a.buttonStyles;\n    return buttonStyles;\n});\nvar MenuItemFR = function(_a, ref) {\n    var _b;\n    var children = _a.children, icon = _a.icon, className = _a.className, prefix = _a.prefix, suffix = _a.suffix, _c = _a.active, active = _c === void 0 ? false : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, component = _a.component, rootStyles = _a.rootStyles, rest = __rest(_a, [\n        \"children\",\n        \"icon\",\n        \"className\",\n        \"prefix\",\n        \"suffix\",\n        \"active\",\n        \"disabled\",\n        \"component\",\n        \"rootStyles\"\n    ]);\n    var level = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(LevelContext);\n    var _e = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(SidebarContext), collapsed = _e.collapsed, rtl = _e.rtl, transitionDuration = _e.transitionDuration;\n    var menuItemStyles = useMenu().menuItemStyles;\n    var getMenuItemStyles = function(element) {\n        if (menuItemStyles) {\n            var params = {\n                level: level,\n                disabled: disabled,\n                active: active,\n                isSubmenu: false\n            };\n            var rootElStyles = menuItemStyles.root, buttonElStyles = menuItemStyles.button, labelElStyles = menuItemStyles.label, iconElStyles = menuItemStyles.icon, prefixElStyles = menuItemStyles.prefix, suffixElStyles = menuItemStyles.suffix;\n            switch(element){\n                case \"root\":\n                    return typeof rootElStyles === \"function\" ? rootElStyles(params) : rootElStyles;\n                case \"button\":\n                    return typeof buttonElStyles === \"function\" ? buttonElStyles(params) : buttonElStyles;\n                case \"label\":\n                    return typeof labelElStyles === \"function\" ? labelElStyles(params) : labelElStyles;\n                case \"icon\":\n                    return typeof iconElStyles === \"function\" ? iconElStyles(params) : iconElStyles;\n                case \"prefix\":\n                    return typeof prefixElStyles === \"function\" ? prefixElStyles(params) : prefixElStyles;\n                case \"suffix\":\n                    return typeof suffixElStyles === \"function\" ? suffixElStyles(params) : suffixElStyles;\n                default:\n                    return undefined;\n            }\n        }\n    };\n    var sharedClasses = (_b = {}, _b[menuClasses.active] = active, _b[menuClasses.disabled] = disabled, _b);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledMenuItem, {\n        ref: ref,\n        className: classnames(menuClasses.menuItemRoot, sharedClasses, className),\n        menuItemStyles: getMenuItemStyles(\"root\"),\n        level: level,\n        collapsed: collapsed,\n        rtl: rtl,\n        disabled: disabled,\n        active: active,\n        buttonStyles: getMenuItemStyles(\"button\"),\n        rootStyles: rootStyles\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MenuButton, __assign({\n        className: classnames(menuClasses.button, sharedClasses),\n        \"data-testid\": \"\".concat(menuClasses.button, \"-test-id\"),\n        component: component,\n        tabIndex: 0\n    }, rest), icon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledMenuIcon, {\n        rtl: rtl,\n        className: classnames(menuClasses.icon, sharedClasses),\n        rootStyles: getMenuItemStyles(\"icon\")\n    }, icon), prefix && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledMenuPrefix, {\n        collapsed: collapsed,\n        transitionDuration: transitionDuration,\n        firstLevel: level === 0,\n        className: classnames(menuClasses.prefix, sharedClasses),\n        rtl: rtl,\n        rootStyles: getMenuItemStyles(\"prefix\")\n    }, prefix), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledMenuLabel, {\n        className: classnames(menuClasses.label, sharedClasses),\n        rootStyles: getMenuItemStyles(\"label\")\n    }, children), suffix && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(StyledMenuSuffix, {\n        collapsed: collapsed,\n        transitionDuration: transitionDuration,\n        firstLevel: level === 0,\n        className: classnames(menuClasses.suffix, sharedClasses),\n        rootStyles: getMenuItemStyles(\"suffix\")\n    }, suffix)));\n};\nvar MenuItem = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().forwardRef(MenuItemFR);\nvar templateObject_1;\n/**\r\n * @deprecated\r\n * `ProSidebarProvider` is deprecated and will be removed in the next major release.\r\n */ var ProSidebarProvider = function(_a) {\n    var children = _a.children;\n    console.warn(\"ProSidebarProvider is deprecated and will be removed in the next major release.\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SidebarProvider, null, children);\n};\n/**\r\n * @deprecated\r\n * `useProSidebar` is deprecated and will be removed in the next major release.\r\n *  please use Sidebar props instead.\r\n */ var useProSidebar = function() {\n    var legacySidebarContext = useLegacySidebar();\n    if (legacySidebarContext === undefined) {\n        throw new Error(\"useProSidebar must be used within a ProSidebarProvider. Please wrap your component with a ProSidebarProvider to use this hook.\");\n    }\n    var collapseSidebar = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function(value) {\n        if (value === undefined) legacySidebarContext.updateCollapseState();\n        else legacySidebarContext.updateSidebarState({\n            collapsed: value\n        });\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        legacySidebarContext.updateCollapseState,\n        legacySidebarContext.updateSidebarState\n    ]);\n    var toggleSidebar = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function(value) {\n        if (value === undefined) legacySidebarContext.updateToggleState();\n        else legacySidebarContext.updateSidebarState({\n            toggled: value\n        });\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        legacySidebarContext.updateToggleState,\n        legacySidebarContext.updateSidebarState\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        console.warn(\"useProSidebar is deprecated and will be removed in the next major release. Please use Sidebar props instead.\");\n    }, []);\n    return {\n        collapseSidebar: collapseSidebar,\n        toggleSidebar: toggleSidebar,\n        collapsed: !!legacySidebarContext.collapsed,\n        broken: !!legacySidebarContext.broken,\n        toggled: !!legacySidebarContext.toggled,\n        rtl: !!legacySidebarContext.rtl\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-pro-sidebar/dist/index.es.js\n");

/***/ })

};
;